[{"content":"Let\u0026rsquo;s get one thing out of the way, I know the term I should be using is \u0026ldquo;Apps \u0026amp; Books in Apple School Manager\u0026rdquo; and not VPP; but lets face it, almost everyone knows what is meant by VPP and for this post, and the amount of times I\u0026rsquo;ll reference it, its a heap quicker to type! So to avoid any confusion if I use VPP, Im talking about apps acquired through Apple School Manager (ASM) üòú\nAlso I will dig into the Automatically Update Apps when Available option and some useful nuggets about expected behaviours but since we\u0026rsquo;re talking Apps and updates I\u0026rsquo;m going to take a little de-tour before I get to the automatic option, so stick with me or just jump straight to the section Automatic App Updates\nVPP Apps VPP Apps are a nice, simple and an easy way that Apple has provided IT Admins to deploy apps to devices from the App Store. In fact, on iOS / iPadOS devices its the only way! (..well mostly but lets not get into 3rd party app stores and side loading.). To make use of this, as an Admin you simply need register your institution for an ASM environment. I use the word simply, since although the process is straight forward, getting the right person(s) in your institution to click the links or speak to somebody at Apple isn\u0026rsquo;t always as simply as it sounds. Hopefully, you are the person that can agree to the T\u0026amp;Cs and sign your institution up, if you haven\u0026rsquo;t already, its a lot less hassle that way.\nFor instructions on signing up to Apple School Manager see the Sign Up For Apple School Manager Documentation . Its worth noting that ASM and Apps \u0026amp; Books content isn\u0026rsquo;t available in every region. When it comes to acquiring content and syncing with Jamf School, this is again a pretty simple and well known process. An Admin logs into Apple School Manager and navigates to Apps \u0026amp; Books, searches for the App (or Book) needed and selects the amount of licences needed their deployment. I use the word \u0026ldquo;acquire\u0026rdquo; here as I think its strange to say \u0026ldquo;buy\u0026rdquo; apps when they are free. After a few moments these licences are assigned to your token and avaialble in your MDM. In Jamf School, as long as configured already (See Volume Purchase Integration page in the Jamf School docs) you can sync your token and the App is ready to go, scope as required and the Apps start to appear on the devices.\nSince I mentioned it, there are a few ways that you can sync your VPP token with ASM in Jamf School.\nThe first to just do nothing! There is an automatic sync with ASM at regular intervals which means the new apps, books or additional licences will turn up all on there own\u0026hellip;..eventually.\nThe likelihood is, if you have acquired a new app or licences you are going to want to deploy them right away and not wait for that automatic sync. Its just going to break your rhythm and thats not going to be useful for that teacher that has just knocked on your door, asking for the app\u0026hellip;for their next lesson\u0026hellip;in 20 mins (hopefully they\u0026rsquo;ve also brought biscuits or coffee to help smooth over the urgency ‚òïÔ∏èüç™)\nYou can therefore, manually sync Jamf School with ASM to pull through the latest information. This can be done by either\nNavigating to Dashboard and hitting the Syncronize Now button Navigating to Apps -\u0026gt; Inventory and clicking the Sync with Apple School Manager button Okay so thats nothing to do with updating apps but we at least have a nice overview of how simple this process is (even if you\u0026rsquo;ve never seen it in Jamf School before)\nUpdating Apps We\u0026rsquo;ve got a nice simple way of deploying apps with VPP but what about keeping them up to date? After all, deploying Apps is only part of their lifecycle.\nThere are a few ways an Admin can keep their VPP Apps up to date when using Jamf School depending on your requirements. This could be offloading this responsibility directly to the user, keeping it squarely as an admin task where you choose when, who and what gets updated or just set and forget with an automatic option.\nLike often when there\u0026rsquo;s more than one way to do things, theres no such thing as a right or wrong way, its all dependant on one Admins situation and environment. Also sometimes, when available, using more than one way might be the best option.\nFor example if you are in an environment where everyone needs the latest version of an app all the time, automatic updates are the best but why not also enable the user to update as well. Theres double the chances things are kept up to date.\nThe opposite side of the fence is if you are in an environment where you need to test the functionality against various OS versions and implement BETA testing groups. You\u0026rsquo;d want to keep this squarely as an Admin task and push App updates only when you are ready.\nUser Updates The way to enable users to update apps is via the Jamf Student or Teacher apps (they both offer this functionality). This doesn\u0026rsquo;t require you to be using the apps for classroom management (although, of course are highly recommended tools for teachers in the classroom).\nTo configure this feature In the Jamf School console navigate to\nOrganisation -\u0026gt; Settings -\u0026gt; Student Check the box Allow Updates of Automatically Installed Apps Click Save Now in the Jamf Student / Teacher app a user has a a menu item called App updates. If they navigate to that menu they will see any VPP apps deployed automatically by Jamf School that require updating and can start the updating of any or all available updates. In addition, any apps that are installed via the Jamf Student / Teacher App are always shown in this menu.\nThis option is available for macOS, iOS and iPadOS.\nPros Free\u0026rsquo;s up Admin time as keeping Apps up to date becomes the users responsibility Users can update Apps when it is convenient for them and without disruption mid task Ideal for 1:1 devices, particular ones that go home Cons Takes some user education to ensure they are aware they can self serve App updates Users may not actually ever update apps, which in the long run might cause issues Enabling users to update apps at any time might mean they do it on your network, which might cause you bandwidth issue (think if many users did this all at the same time, and yes even with a Caching Server it could cause some network slowness) Enabling users to update apps at any time likely means that a user, most likely a student, could and will update a key app in the middle of a lesson to prevent them from having to do any work Not recommended for devices that are shared between multiple users since its no one persons responsibility to keep apps up to date Planned Updates by Admins Keeping Apps up to date this way requires the person responsible for keeping apps up to date to have access to the Jamf School console and the time to deliver this service. By no means does this mean that its a bad option but it can be a much more time intensive than other option.\nTo use this option, in the console navigate to Apps -\u0026gt; Updates. From this window you will see a list of apps that require updating. Within each app that requires a update you can either click the Update all device button (which updates the app on all devices that have it installed) or a Show devices button. If you select Show devices you get a list of all the devices with that app installed and have an update available and can update the app on single iPads (rather than the entire list). There are also some mass actions that can be performed at the main Updates page by checking the box to select all or many apps. This way you can choose to update all apps, across your entire fleet with a single click.\nI\u0026rsquo;ve seen this options used in two different ways depending on the reasoning behind going with this route in the first place.\nThe first is for Admins that want to update everything, all at once but at a time they choose, for example over a school holiday or over the weekend. Using the bulk option allows for a single click to start the flow but it does require a click of a button, so the Admin chooses when to start that particular flow.\nAgain, just to point out, even with a Caching Server, pushing all updates to all devices at once (when they are on your school network at least) could produce a heavy load. Consideration to the impact of this should be given. The second is for Admins that have update test plans. Being able to not only choose when to update apps but who receives the update can be very useful if you have a BETA users group that provides feedback on usability before releasing the update to the general population (I\u0026rsquo;m sure every Admin has seen an app update that didn\u0026rsquo;t quite work the way the dev intended and had an app out of action while a fix is delivered)\nPros Granular control of when updates are applied Updates only issued during times deemed as appropriate by admins Run test plans with BETA test user style groups Cons Requires Admin intervention on a regular basis Can be very time intesive Could produce a heavy load on the network Apps could be without new features if not updated regularly, which might have an impact on the teaching in the classroom Automatic App Updates So then we land at automatic app updates. This is a feature enables an Admin to set and forget when it comes app updates (well, kind of but we\u0026rsquo;ll get to that shortly). This setting can be enabled by navigating to Organisation -\u0026gt; Settings -\u0026gt; General. From this window check the box Automatically update apps when an update is available (note that this says only for iOS devices on iOS 11.3 or later but this does work for macOS as well.)\nIts that simple, automatic updates are enabled and when a new app is available it will get updated on the device\u0026hellip;which sounds great. Until you think about it a little more, particularly the part that says when an update is available. When is an update available? Well thats the point, how long is a piece of string. This could be any time but including (and thanks to Murphys Law , most likely) in the middle of class. What happens to an app when its updating? Well the next time it is closed, or if already closed, then it becomes unavailable until the update is complete. Depending on the size of the app, the load on the network at any given time and if the app is cached on a Caching Server, then you could have entire classes suddenly not able to complete their tasks. Or put another way a queue of angry teachers at your door.\nThats why on the same General window under the Automatically update apps when an update is available option there is a second option that works to make automatic updates smarter. This option is Only automatically update apps during the specified times. Once the box is check there are two boxes where the Admin can define a start time and finish time. This allows an Admin to basically say\n\u0026ldquo;Please automatically update the VPP apps when available, but only between the hours of 22:00 and 04:00\u0026rdquo;.\nThis way apps wont be unavailable due to updates during school time or during times of day that you might expect a child to be doing homework (if the devices go home). The time window that you give here will be completely dependant on your situation, for example if the devices do not go home and you know that they aren\u0026rsquo;t used from 17:00 then you could start the update window from say 18:00 right the way through until the next morning before people start to arrive at school. One thing that I would personally recommend though, is to make that update window as wide as possible and at least 5 hours, due to the mechanisms used to provide the update (again, we\u0026rsquo;ll get to this shortly). This might also be useful if you have some sort of network shaping that happens at certain times of time of the day (I\u0026rsquo;ve seen school completely turn off wifi or heavily restrict bandwidth during the evening), to ensure that the updates take place as smoothly as possible.\nForce for Locations, Global Settings and App Details Once an Admin has configured these settings and if they also use Locations , they can enforce this on all locations if set from the main location. At the top right corner of the window you see a drop down (only if using locations) where you can toggle between Force these settings for all locations and Do not force these settings for all locations. If you force for all locations the automatic update setting(s) and any and all settings that are in the General window are set for every other location and cannot be configured differently at each location. This might just be what you want so that all all locations act in the same way but in other cases each location may need a different window for example.\nAnother little message you will see alongside the Automatically update apps when an update is available is This setting can be overwritten in App Details. This option allows for a more granular approach if a \u0026ldquo;set for everything and forget\u0026rdquo; doesn\u0026rsquo;t quite work. An admin could set the Global setting (aka set under Organisation -\u0026gt; Settings -\u0026gt; General) so that apps automatically update but exclude certain apps from this, so that new versions can be tested before pushing out to the entire fleet.\nTo do this navigate to Apps -\u0026gt; Inventory, search for / choose the app to exclude and click on its name or the pencil tool. In this App Detail window, on the right there are some options that can be configured for this individual app, including a setting Automatically update apps when an update is available. As standard this is set to Use global settings in every app record but there are also two other options Enable and Disable.\nIf an admin wanted to exclude this app from being automatically updated they would choose Disable from this menu and ensure they hit Save before leaving the page. Lets assume we\u0026rsquo;ve selected Automatically update apps when an update is available in Organisation -\u0026gt; Settings -\u0026gt; General; The result is that as standard Apps will get updated automatically apart from this app, which the Admin would need to manually update or allow the user to self serve the update.\nThis situation can also be flipped. Lets say an Admin doesn\u0026rsquo;t want to automatically update apps as a general rule however, there are a handful of apps that must always be up to date. The Admin would leave the Automatically update apps when an update is available in Organisation -\u0026gt; Settings -\u0026gt; General unchecked. They could then go to that \u0026ldquo;school critical\u0026rdquo; app record and choose Enable in the App Details Automatically update apps when an update is available option. Then only this app would automatically update, leaving for other flows for the rest of the apps.\nSounds Great, Set and Forget, Sign Me Up\u0026hellip; For most people, automatically having VPP apps update and not needing to think about it again (or until we need to troubleshoot something at least) is going to be the option that is chosen the most. It just makes sense for most Admins.\nSo you\u0026rsquo;ve chosen this option and things are ticking along, you\u0026rsquo;ve not thought about app updates for a little while. Then suddenly you get a ticket in your system or a knock on the door from a teacher. App X had an update a 4 or 5 days days ago, its a major one with an exciting new feature that is going to really help that teacher when it comes to engaging students. Only, they\u0026rsquo;ve looked at App X on their device for the last few days, it doesn\u0026rsquo;t look any different and the app still says its the old version number when it loads.\nYou look at them, thinking \u0026ldquo;users\u0026rdquo; knowing full well that you\u0026rsquo;ve got automatic updates turned on. Only they show you, and the app does indeed say the old version. Next you think maybe I\u0026rsquo;ll just have a look at the console, theres a section for App updates. So you log into the console and navigate to Apps -\u0026gt; Updates. As the page loads, theres a heap of apps listed there that need updating on a heap of devices, including App X. You want to help the teacher that needs to updated app so you hit Update all devices on App X, smile at the teacher, say it\u0026rsquo;ll be updated in a little while and apologise while secretly sweating it wondering why your apps aren\u0026rsquo;t automatically updating.\nIf you are already use this feature, this might have actually happened to you already. So wants gone on? why aren\u0026rsquo;t your apps update? To answer that we need to understand the mechanics and expected behaviours that come with automatic updates.\nAutomatic Update Mechanics \u0026amp; Expected Behaviours So there are a few things that we need to understand with the Automatically update apps when an update is available feature in Jamf School.\nThe first is around an \u0026ldquo;App Update\u0026rdquo;\nThere isn\u0026rsquo;t an Update App command as such (its the same with reinstall) in the MDM framework. Instead a regular InstallApplicationCommand, which is the same command sent when an app is first installed, is used. This prompts the device to go and pull the app from the app store, which is the latest version and as such a user see\u0026rsquo;s an updated app on the device. Commands like this can be pushed to the device there and then (like the first install of an app would be) or queued up for when a device nexts checks-in.\nThis in of itself isn\u0026rsquo;t the part that is the \u0026ldquo;light bulb moment\u0026rdquo; but knowing that an update is kicked on server side (at least until Apple expand DDM a little more) is going to help all the pieces fall into place in a second.\nThe question we should be asking is how does Jamf School know when to send the device a InstallApplicationCommand or more so when and how does Jamf School know that there is a new version of App X in order to send an InstallApplicationCommand to the device?\nThis is two fold.\nFirstly when a device does a full check in with Jamf School (this happens once a day, through clicking refresh device on the device inventory and a few other times) there are a number of commands Jamf School sends to the device to query it for information. One if these is InstalledApplicationList this returns a heap of data about the apps installed on the device, including a key HasUpdateAvailable, which is true or false and the ExternalVersionIdentifier. Basically the ID of the App in the App Store.\nIf you really want to to dig into this a little more I\u0026rsquo;ll guide you to the Apple Developer Docs for InstalledApplicationListResponse.InstalledApplicationListItem and note this specific call out\nA newer version of an app might not be available for installation on the device for a variety of reasons. A common reason is that the device‚Äôs operating system version or hardware is incompatible with the available version of the app.\nThe second part of the puzzle is Jamf School\u0026rsquo;s App record(s) getting updated from Apple School Manager (actually its the App Store but I\u0026rsquo;m splitting hairs), specifically it\u0026rsquo;s version number changing. If the version number in the App record in the Jamf School database hasn\u0026rsquo;t changed, and the device hasn\u0026rsquo;t reported its InstalledApplicationList data, Jamf School wont queue up that all important InstallApplicationCommand (this is a simplified version of events, Im sure there is some other logic here but the point is we need both sides of the coin, as it were, before Jamf School is able to queue the update)\n\u0026hellip;we know from above when the device reports the HasUpdateAvailable, so the follow on question should be\n\u0026ldquo;So when does Jamf School sync with ASM to pull the latest metadata about the apps its pulling through into the App Inventory?\u0026rdquo;\nThis is the key question! Understanding this is the key to understanding the behaviour of the Automatically update apps when an update is available feature and either not panicking the next time somebody says apps haven\u0026rsquo;t updated or amending your workflow a little.\nAs it stands and understandably so, Jamf School doesn\u0026rsquo;t knock on ASM\u0026rsquo;s door every few minutes to ask if theres any changes. Instead Jamf School syncs with ASM only in a few scenarios, in fact we\u0026rsquo;ve mentioned a few of these already above. When it comes to apps, as an Admin you can you can initiate a School ASM sync by\nNavigating to Dashboard and clicking the Synchroize Now button (this will sync data about all apps) Navigate to Apps -\u0026gt; Inventory and clicking the Sync with Apple School Manager button (this will sync data about all apps) ,br\u0026gt; Navigate to Apps -\u0026gt; Inventory, click on either the pencil tool or the app name to enter the App Details and then click Check for updates in the App Store (this will sync data about this app) Navigate to Apps -\u0026gt; Updates (this will sync data about all apps and you will see a message in the lower right once the sync is complete) Its not until a sync happens that Jamf School can compare the App version number in the Jamf School database with that of the version number in ASM, do the other logic with the data the device reports back and if needed (ie the app version is different and the device reports an avilable update) send that all important InstallApplicationCommand.\n\u0026ldquo;What happens if I am truly a set and forget Admin? I rarely do one of the things you\u0026rsquo;ve just said above! Does that mean my apps don\u0026rsquo;t ever actually get updated?\u0026rdquo;\nI\u0026rsquo;ll guess there\u0026rsquo;ll will be more than a few people asking this question right now. I certainly asked this question at least.\nLuckily the answer is, even if are a true set and forget Admin, your apps are still getting updated. Just maybe not as quickly after release as your users would like. Jamf School will automatically initiate an ASM sync to fresh app metadata once every 7 days. After this automatic sync, if there are any differing version numbers, which suggest an app needs updating, Jamf School will queue and deliver the InstallApplicationCommand to the corresponding devices (as long as they\u0026rsquo;ve successfully reported back the InstalledApplicationList) for these apps.\nSo the apps will get updated even if you set and forget but at any given time, if you were to check the Apps -\u0026gt; Updates window you will see apps that need to be updated and haven\u0026rsquo;t. This is because the automatic sync hasn\u0026rsquo;t happened yet (its not been 7 days since the last sync). The very fact that clicked on that page initiated a sync and that data has literally just been pulled through, now that there is a known update in the Jamf School database, the devices will get the updates at their next check in (again, as long as they\u0026rsquo;ve successfully reported back the InstalledApplicationList). Assuming you didn\u0026rsquo;t click the button to have them update now.\nDealing with the Expected Behaviour The key and light bulb moment here is know what is meant by the when an update is available part of automatic updates. when an update is available does not mean as soon as a developer pushes an update to the app store. Instead, what is meant by \u0026ldquo;available\u0026rdquo; is once Jamf School is aware it is available, which depending on your habits as an Admin could be as far out as 7 days from the release to the App Store\nAs an Admin there are a few ways to deal with this. Firstly and it feels a little defeatist, don\u0026rsquo;t use the Automatically update apps when an update is available feature and instead opt for one of the other update options mentioned above.\nSecond is to evaluate if having an update up to 7 days after release is acceptable for your environment. This could be from a feature or security point on view. Assuming that it is acceptable, my suggestion would be to educate your users that updates can take up to a week after release to update and create some way of your user to escalate important cases so they can have apps updated sooner. From an Admin point of view, this would require a person to go into the console, go to the Apps -\u0026gt; Update page and choose to update that app on the devices.\nThirdly is to do one of the four things mentioned above each day, or every few days at least. I know that there will be people that think that not very \u0026ldquo;automatic\u0026rdquo; but my argument would be I\u0026rsquo;d bet you are in the Jamf School Console (or somebody on your team) at least once a day, so why not have them click the sync button? Remembering that once the app version number has updated then Jamf School takes care of the rest of it anyway\u0026hellip;.queuing up and deploying the InstallApplicationCommand.\nOh I almost forgot! while we\u0026rsquo;re talking about queuing up and deploying the InstallApplicationCommand. Remember the option Only automatically update apps during the specified times so that updates only take place at certain times of day? The InstallApplicationCommand is queued and not delivered until a device checks in during that window of time. Thats why I said keep the window as wide as possible (and at least 5 hours) as a check in happens once every four hours with Jamf School and if your update window is only 2 hours, you might have heaps of devices that never get the execute the command as then don\u0026rsquo;t check in during that window, even weeks after an update has been released.\nPros Set and forget app updates Set an update window of time so updates don\u0026rsquo;t happen during key times Can be set at a global level or per app Can exclude apps from global setting depending on need Cons Depending on console usage, App sync with ASM can be up to 7 days away when an app is released Requires device to have successfully reported back details of a InstalledApplicationList command Scheduled updates require a device to check in during the schedule window, making the window too short or having device with not network connections could see devices rarely get app updates Perception that auto updates is not working when navigating to Apps -\u0026gt; Updates page Need for communication for end users and other admins on expected behaviour VPP App Update Options As you can see there are a number of ways to tackle this and things to consider if you are wanting to use the Automatically update apps when an update is available option. For me, the purpose of this blog was to give a bit more understanding of the mechanics of the Automatically update apps when an update is available option since its done server side and not via a simple MDM framework command.\nTheres been thought and time put into this to make sure that updates only go to devices that have updates available (no point trying to send an update to a device that isn\u0026rsquo;t running an OS that is compatible with the latest version of an app) and at a time that is best suited.\nIm sure however, there are people out there wondering what option I would take. The answer there really depends on the deployment but I\u0026rsquo;d be using a combination of auto updates (more as a fail safe) and another option. For 1:1 devices, especially ones that go home I\u0026rsquo;d look to use auto updates during home hours but also educate the users in how to use the update feature of Jamf Student / Teacher. For shared devices or devices that stay in the school the whole time a combination of auto update (again more as a fail safe) and then pushing updates via the Apps -\u0026gt; Updates pages a few times a week or maybe over the weekend.\nThere is one other thing I\u0026rsquo;d like to point out. I\u0026rsquo;ve spoken to people recently where is seems that using the Automatically update apps when an update is available feature in environments where Caching Server is also used causes a sort of loop in some cases. The commands are queued and executed as expected but the app that is installed always seems to be current version the device has, not the newest one.\nI don\u0026rsquo;t have anything else to add to that, in terms of fixes or anything and it doesn\u0026rsquo;t appear to be in every instance. Its more of a PSA. The thing I will say on the topic of Caching Server though\u0026hellip;\nIts super simple to configure, that simple in fact that its now part of macOS. Just a toggle switch to turn on and with more and more households having many Apple devices it makes sense its that simple to turn on and make use of this feature.\nOnly most school networks aren\u0026rsquo;t as simple as a home network and once upon a time you only got the Caching ability as part of macOS Server, which you had to configure correctly! Although in todays built-in version of Caching Server its just a toggle switch and designed to \u0026ldquo;just work\u0026rdquo; on simple home networks, there are advanced options in the GUI. Theres even more that can be configured via terminal and DNS servers for when the deployment is on an \u0026ldquo;enterprise\u0026rdquo; style network that most schools find themselves on.\nOnly in many cases caching servers are deployed on \u0026ldquo;enterprise\u0026rdquo; style networks by just toggling the switch on and expecting things to \u0026ldquo;just work\u0026rdquo;.\nCaching Server can be great, don\u0026rsquo;t get me wrong and I 100% recommend them. Sometimes its just worth being aware of other things you might want to consider when turning something on (wether thats Caching or Automatic App Updates).\n","date":"May 22, 2025","permalink":"/posts/automatically-updating-vpp-apps/","summary":"Keeping your VPP (Apps \u0026amp; Books) Apps up to date can be as simple as a check box in Jamf School but lets look at what to expect when using the Automatically Update Apps when Available Option","title":"Automatically Updating VPP Apps","type":"blog"},{"content":"If you are a Jamf School Admin theres a good chance that you\u0026rsquo;ve used variables in your deployment.\nVariables are super useful to an Admin as they provide a way to create configurations that requires unique values without having to create many (10\u0026rsquo;s, 100\u0026rsquo;s, 1000\u0026rsquo;s depending on your deployment) individual items for each unique values. The format for variables in Jamf School is %Variable% and there are many different variables that can be substituted. You can find a full list in the documentation Variables can be used in a number of places within the Jamf School console, not just in Profile payloads.\nJamf School Variables Popular use cases for variables are for naming devices (using %ProductName% - %SerialNumber% will change the devices display name with a prefix of the device type with the individual devices serial number after) and creating custom iOS wallpapers which display the owners name. For example creating a wallpaper payload where the image is a schools colours and logo and then adding text on top of this. Using %FullNames%'s iPad would then display the full name of the user assigned to the device. You can actually use variable\u0026rsquo;s to generate an QR code on the wallpaper which, once scanned, will take you directly to that device record in the console.\nDepending on the variable that you are using they are also dynamic. Lets take the name of the device again, only this time we use %FullName%'s %ProductName% and the device\u0026rsquo;s owner is Alice. The devices name would be Alice's MacBook Pro. If we were then to give that device to Bob and assign him as the owner, upon next check in the devices name would change to Bob's MacBook Pro. All without the admin needing to rename the device manually.\nVariables are very powerful when used correctly and can be key when in workflows or automations. Its all about working smarter not harder.\nmacOS Scripting As mentioned above variables can be used in various places in the console, not just in the Profile payloads section. They work across all supported platforms, iOS, iPadOS, macOS \u0026amp; tvOS, and if you are supporting macOS you might have tried to use these Jamf School variables in your scripts only to find this is about the one place they are not supported!\nThere are many reasons that one might what to use the Jamf School variables in a script, as I always say when it comes to scripting you are limited only by your imagination but Im sure you could think up some times where it would be useful to have information stored in Jamf School variables available in a script. Even if its simply who is the current owner, which of course doesn\u0026rsquo;t always equal the name of the user account currently signed in or if you use Locations in Jamf School, which location is the device assigned to.\nHowever adding %Username% to a script wont result in Jamf School substituting that value with in your script. It\u0026rsquo;ll stay is %Username% and give you a result that you didn\u0026rsquo;t intend.\nSo, if Jamf School variables can be so useful, how can we use them within our scripts? The answer is, make them available locally on the device.\nUsing Jamf School Variable Substitution At the risk of teaching people to suck eggs, lets quickly look at what happens when we use variable substitution in the Jamf School Console. After all, for every admin out there that has been doing this for years, theres another who only just started managing devices.\nEssentially, when you use a %variable% you are saying I want to use a value that is yet to be determined, the %variable% is just a placeholder. Depending on which variable you use, Jamf School will then add the \u0026ldquo;real\u0026rdquo; value when creating the configuration.\nLets take an example of a profile that asks an admin to provide the users email address as part of the configuration. At this point the Admin has no idea who the user will be, it could be 100\u0026rsquo;s of possibilities. So instead they use the value of %Email%.\nSince Jamf School also knows about users in the system and their relationship with devices, when it delivers the profile to the device it says\n\u0026ldquo;Okay I need to replace %Email% with the real value. I can see that this devices owner is Ant Darlow, I will look up that users record stored in my system and find his email value, which is ant@email.com . Now I will write this real value into the profile\u0026rdquo;\nThe same is the case with any of the available variables in the console, think %SerialNumber% or %uuid%, these are values that Jamf School already store about the device and can be substituted in place of the %variable% placeholder.\nWithout the variable an admin would need to create a unique profile for each and every user and hardcode the real value into each one. Variables allow for this \u0026ldquo;configure once, use for all\u0026rdquo; type of workflow.\nIts worth noting that if a \u0026ldquo;real\u0026rdquo; value is not available Jamf School configurations will still show the %variable% placeholder. For example, if you name the device with %FullName% and the device does not have an owner, the device will be called FullName, until the point is does have an owner assigned How to use Jamf School Variables in Scripts Thats all very well and good but you might be thinking, \u0026ldquo;how does that help me use these Jamf School variables in scripts\u0026rdquo;. The answer it two fold and using the fact that Jamf School will substitute these variables for real values when creating configurations\u0026hellip;.configurations such as Profiles.\nOnce we have a profile, that contains these \u0026ldquo;real\u0026rdquo; values, on the device, its basically a preference file. With a script we can read information from preference files or in our case our custom profile!.\nI\u0026rsquo;ll walk you through the steps as we go along but as an overview\nCreate a custom profile containing variables you might need or want to us in a script Deploy custom profile with Jamf School Create a script (or edit one you have) that reads the values in the custom profile Win at admin-ing and drink coffee To follow along you\u0026rsquo;ll need a way of creating a Profile. This could be something generic like BBEdit or Coderunner or something most specific to creating preferences such as PlistEdit Pro .\nThere are also an example profile over on my GitHub .\nStep 1: Creating a Custom Profile The First step is finding out the Jamf School variables available to you and choosing which ones you are going to need or want within your scripts, a full list can be found in the documentation Once you have choosen the values you will need to add them to the profile as a key / value pair.\n\u0026lt;key\u0026gt;AssetTag\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;%AssetTag%\u0026lt;/string\u0026gt; The key tag is the name for the value and its important that we keep these names sensible and to the point as its these keys we will be reading in our script but they can by anything. You will thank yourself in the future if you keep them simple and concise , I promise.\nAs for the value you will see that I have added the Jamf School variable (in the above example %AssetTag%. Remember the placeholder will be substituted for the \u0026ldquo;real\u0026rdquo; value once deployed by Jamf School, it doesn\u0026rsquo;t matter that you aren\u0026rsquo;t creating the profile in Jamf School. However, if you were to upload this to another MDM the chances are almost certainly zero that any substitution will happen. Maybe that MDM doesn\u0026rsquo;t use variables at all or uses a different syntax (for example Jamf Pro uses $variable$, opting for $ instead of %)\nIf this is the first time you\u0026rsquo;ve ever created a profile manually to upload to Jamf School (or any other MDM for that matter) I highly suggest you take my example profile and edit that as required, rather from starting from scratch.\nThere are a few values that you might want to change from the example\nPayloadType This is the preference domain that the profile will create and you will read the data from in your scripts. Again this can be anything you like but is usually a reverse domain. If you require to use you own preference domain be sure to change this but for the following examples I will assume the example default is bring used.\nPayloadOrganization At both the top level and within the PayloadContent. You may want to change this you match your organisational name\nPayloadDisplayName At both the top level and within the PayloadContent. The name displayed for the profile / payload in the system settings of macOS\nPayloadDescription The description displayed for the profile in the system settings of macOS\nFinally, if you have are comfortable with creating and editing a plist, you could instead create a plist and save it with the preferred preference domain (following the example it would be com.cantscript.localUserInfo) and upload it to Jamf School as shown in the next step. Jamf School will wrap the plist into a profile once uploaded / deployed.\nStep 2: Deploy Custom Profile with Jamf School With you custom profile prepared and saved, the next step is to upload it and deploy it with Jamf School. This is a fairly easy process but if you\u0026rsquo;ve never need to do this before, navigate to\nProfiles -\u0026gt; Configuration Profiles and click + Create Profile Choose Upload custom profile Navigate to the Custom Profile on your machine and drag to the Jamf School window Once uploaded click next Add a Profile Name (and a Description, as required) and click Next Click Finish on the next page Click Save You custom profile is now ready to be deployed. This can be done in a few ways with Jamf School, use your regular scoping methods to deploy to your target device(s) when ready (you should only deploy to your test device for now).\nIf you have used any of the user variables in your profile, you should consider scoping the profile only once the device has an owner assigned using smart groups. Otherwise the values will not be substituted and even if a owner is assigned after the fact the profile will need reinstalled On a test device you can verify that the profile has installed and that the %variables% have been replaced with the \u0026ldquo;real\u0026rdquo; values that are stored in Jamf School\nStep 3: Read Profile Values in a Script There are 2 ways that I know to read profile values within a bash script and I suspect there are more. The first is to use plistbuddy. A function can be written which enables you to read a specific key from the plist, offer a default value (if the key isn\u0026rsquo;t there) and store it an a variable. Thijs Xhaflaire uses this method in his DiskEncrypter project. An example of this function is\nmanagedPlist=\u0026#34;/Library/Managed Preferences/com.cantscript.localUserInfo.plist\u0026#34; readPref() { # $1: key # $2: default (optional) local key=$1 local defaultValue=$2 if ! value=$( /usr/libexec/PlistBuddy -c \u0026#34;Print :$key\u0026#34; \u0026#34;$managedPlist\u0026#34; 2\u0026gt;/dev/null ); then value=\u0026#34;$defaultValue\u0026#34; fi echo \u0026#34;$value\u0026#34; } And the usage to store the result to a variable within the script would be as below; where AssetTag would be the key we are looking for and \u0026quot;no data\u0026quot; would be the default value if there was no AssetTag key\nschoolAssetTag1=$( readPref assestTag \u0026#34;no data\u0026#34;) The second way I was shown by Armin Briegel aka scriptingosx . This method is more robust as it reads key values for the preference domain, no matter where the plist(s) are located and these locations are numerous. Its a little outside of the scope of this blog but there could be a plist com.example.plist in /Library/Preferences, ~/Library/Preferences and /Library/Managed Preferences. There is then a hierarchy in which preference level takes precedence, however Configuration Profiles (/Library/Managed Preferences) overrule everything else.\nThis method will read key values across the all possible preference locations and take the hierarchy into account when providing the result (this is different to method 1 which is read a specific plist in a specific location)\nAlthough this method is slightly different, for our use case here the results are largely the same with both. The method of reading the preference and key is once again wrapped into a function\nMANAGED_PREFERENCE_DOMAIN=\u0026#34;com.cantscript.localUserInfo\u0026#34; getPref() { # $1: key, $2: default value, $3: domain local key=${1:?\u0026#34;key required\u0026#34;} local defaultValue=${2-:\u0026#34;\u0026#34;} local domain=${3:-\u0026#34;$MANAGED_PREFERENCE_DOMAIN\u0026#34;} value=$(osascript -l JavaScript \\ -e \u0026#34;$.NSUserDefaults.alloc.initWithSuiteName(\u0026#39;$domain\u0026#39;).objectForKey(\u0026#39;$key\u0026#39;).js\u0026#34;) if [[ -n $value ]]; then echo $value else echo $defaultValue fi } Given the above, there is also a function that can check if the key is set and locked with a profile. Again, outside of our use case here but this can be used to ensure that the key value you are reading is from a profile and not elsewhere. I\u0026rsquo;ve used this in other projects to there is no profile installed and exit the workflow\ngetPrefIsManaged() { # $1: key, $2: domain local key=${1:?\u0026#34;key required\u0026#34;} local domain=${2:-\u0026#34;$MANAGED_PREFERENCE_DOMAIN\u0026#34;} osascript -l JavaScript -e \u0026#34;$.NSUserDefaults.alloc.initWithSuiteName(\u0026#39;$domain\u0026#39;).objectIsForcedForKey(\u0026#39;$key\u0026#39;)\u0026#34; } The usage to store the result to a variable within the script would be as below; where AssetTag would be the key we are looking for and \u0026quot;no data\u0026quot; would be the default value if there was no AssetTag key\nschoolAssetTag2=$(getPref assestTag \u0026#34;no data\u0026#34;) Now this is where I leave the hard work to you. How, what or why you need or want to use these variables is completely dependant on you and your environment (and even imagination). I\u0026rsquo;ve given an example script which simply uses SwiftDialog to display the information, thus showing I am \u0026ldquo;accessing\u0026rdquo; those Jamf School variables in a script (the script can be ran from Jamf School using the scripting module) even if in reality this example is nothing more than \u0026ldquo;show and tell\u0026rdquo;.\nOne Last Thing Since we now know how to read key / values from a profile. If you are also using Jamf Student or Teacher Jamf School sends an additional profile to macOS device automatically. This profile contains some information to configure the app so that you don\u0026rsquo;t have to manually log in, for example.\nIf you take a look in the system settings you can see the key / values it provides. Some of these are the same as you may have in your custom profile (which means you might not even need to create a custom profile, depending on your needs!) but has the additional keys of isTeacher (which can be true or false) and photo (with a value that is a URL to the stored picture in your Jamf School instance).\nSo if you use photos to attached you users in your deployment you now has access to personalise notifications (like my swiftDialog example) with the owners photo too.\nThe managed preference domain for this is com.zuludesk.macos.selfservice.plist and managed preference in general (incase you what to read some other profile some time) are located in /Library/Managed Preferences\nI have also included an altered script over at GitHub that contains this additional logic to use the photo and add a teacher or student app icon depending on if result of the isTeacher key.\nFurther Reading If this is your first time diving into profile and plist creation but its sparked an interest, here are a few things you might want to check out\nConfig Profile and manage ALL the things‚Ä¶just about by Bob Gendler swift-prefs by scriptingosx\n","date":"May 7, 2025","permalink":"/posts/using-jamf-school-variables-in-scripts/","summary":"Jamf School allows for variable substitution all over the place, just not in Scripts! Learn how to deliver Jamf School variables to devices for use in Scripts","title":"Using Jamf School Variables in Scripts","type":"blog"},{"content":"I\u0026rsquo;ve been toying with the idea of creating a blog for a little while. At some point last year I decided to get the domain cantscript.com with the thought of next step blog and then didn\u0026rsquo;t.\nI have since then however embraced the moniker of CantScript on GitHub and MacAdmins Slack.\nShall we start with that? Why go be CantScript?\nWell its a bit tongue in check but at the same time, if you were to aks me to my face I would tell you\n\u0026ldquo;I can\u0026rsquo;t script. I have all these ideas of what would be cool but mostly have no confidence that I could script anything to get the idea across the line\u0026rdquo;\nI still stand by that but as it turns out, its not all about scripting is it. In a day and age of MDM its all about profiles and payload too\u0026hellip;just to add to the complexities. Once again, if you\u0026rsquo;d ask me i\u0026rsquo;d reply with\n\u0026ldquo;well, I think it works this way but I\u0026rsquo;m not sure if doing it that way would work\u0026rdquo;\nEven so, I\u0026rsquo;m a trier and more often than not I find a way to get something of the ground and working. Even if by most peoples standing it held together with tape.\nAnd that there is what I\u0026rsquo;d like the very point of this blog to be. I want to share things that I\u0026rsquo;ve struggled with or might not know and make it easier for the next person. Might it be the best way? Nope, likely not in fact! but if it gets somebody else from A to B quicker than it did me and they can improve on it, then I\u0026rsquo;d say I\u0026rsquo;ve done what I set out to do.\nThere is then a second point that I\u0026rsquo;d like to bring up\u0026hellip;\nAs mentioned on the home page, this blog will be focused on Apple and Jamf and my background has been in the Education sphere. As such as have developed a specialism in Jamf School but if you are here already, you likely know this.\nSo expect that most posts here will be all about Jamf School, Jamf School workflows and cool things to when working with Jamf School.\nThere we have it, my fist post so that theres something here when I heopfuly actually publish this blog to the big ol\u0026rsquo;interwebs.\nüêú\n","date":"May 1, 2025","permalink":"/posts/so...i-decided-to-make-a-blog/","summary":"Hello World! My first post and a chance to discover what I\u0026rsquo;m hoping this blog is all about","title":"So...I decided to make a blog","type":"blog"}]