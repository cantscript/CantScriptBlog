[{"content":"If you are a Jamf School Admin theres a good chance that you\u0026rsquo;ve used variables in your deployment.\nVariables are super useful to an Admin as they provide a way to create configurations that requires unique values without having to create many (10\u0026rsquo;s, 100\u0026rsquo;s, 1000\u0026rsquo;s depending on your deployment) individual items for each unique values. The format for variables in Jamf School is %Variable% and there are many different variables that can be substituted. You can find a full list in the documentation Variables can be used in a number of places within the Jamf School console, not just in Profile payloads.\nJamf School Variables Popular use cases for variables are for naming devices (using %ProductName% - %SerialNumber% will change the devices display name with a prefix of the device type with the individual devices serial number after) and creating custom iOS wallpapers which display the owners name. For example creating a wallpaper payload where the image is a schools colours and logo and then adding text on top of this. Using %FullNames%'s iPad would then display the full name of the user assigned to the device. You can actually use variable\u0026rsquo;s to generate an QR code on the wallpaper which, once scanned, will take you directly to that device record in the console.\nDepending on the variable that you are using they are also dynamic. Lets take the name of the device again, only this time we use %FullName%'s %ProductName% and the device\u0026rsquo;s owner is Alice. The devices name would be Alice's MacBook Pro. If we were then to give that device to Bob and assign him as the owner, upon next check in the devices name would change to Bob's MacBook Pro. All without the admin needing to rename the device manually.\nVariables are very powerful when used correctly and can be key when in workflows or automations. Its all about working smarter not harder.\nmacOS Scripting As mentioned above variables can be used in various places in the console, not just in the Profile payloads section. They work across all supported platforms, iOS, iPadOS, macOS \u0026amp; tvOS, and if you are supporting macOS you might have tried to use these Jamf School variables in your scripts only to find this is about the one place they are not supported!\nThere are many reasons that one might what to use the Jamf School variables in a script, as I always say when it comes to scripting you are limited only by your imagination but Im sure you could think up some times where it would be useful to have information stored in Jamf School variables available in a script. Even if its simply who is the current owner, which of course doesn\u0026rsquo;t always equal the name of the user account currently signed in or if you use Locations in Jamf School, which location is the device assigned to.\nHowever adding %Username% to a script wont result in Jamf School substituting that value with in your script. It\u0026rsquo;ll stay is %Username% and give you a result that you didn\u0026rsquo;t intend.\nSo, if Jamf School variables can be so useful, how can we use them within our scripts? The answer is, make them available locally on the device.\nUsing Jamf School Variable Substitution At the risk of teaching people to suck eggs, lets quickly look at what happens when we use variable substitution in the Jamf School Console. After all, for every admin out there that has been doing this for years, theres another who only just started managing devices.\nEssentially, when you use a %variable% you are saying I want to use a value that is yet to be determined, the %variable% is just a placeholder. Depending on which variable you use, Jamf School will then add the \u0026ldquo;real\u0026rdquo; value when creating the configuration.\nLets take an example of a profile that asks an admin to provide the users email address as part of the configuration. At this point the Admin has no idea who the user will be, it could be 100\u0026rsquo;s of possibilities. So instead they use the value of %Email%.\nSince Jamf School also knows about users in the system and their relationship with devices, when it delivers the profile to the device it says\n\u0026ldquo;Okay I need to replace %Email% with the real value. I can see that this devices owner is Ant Darlow, I will look up that users record stored in my system and find his email value, which is ant@email.com . Now I will write this real value into the profile\u0026rdquo;\nThe same is the case with any of the available variables in the console, think %SerialNumber% or %uuid%, these are values that Jamf School already store about the device and can be substituted in place of the %variable% placeholder.\nWithout the variable an admin would need to create a unique profile for each and every user and hardcode the real value into each one. Variables allow for this \u0026ldquo;configure once, use for all\u0026rdquo; type of workflow.\nIts worth noting that if a \u0026ldquo;real\u0026rdquo; value is not available Jamf School configurations will still show the %variable% placeholder. For example, if you name the device with %FullName% and the device does not have an owner, the device will be called FullName, until the point is does have an owner assigned How to use Jamf School Variables in Scripts Thats all very well and good but you might be thinking, \u0026ldquo;how does that help me use these Jamf School variables in scripts\u0026rdquo;. The answer it two fold and using the fact that Jamf School will substitute these variables for real values when creating configurations\u0026hellip;.configurations such as Profiles.\nOnce we have a profile, that contains these \u0026ldquo;real\u0026rdquo; values, on the device, its basically a preference file. With a script we can read information from preference files or in our case our custom profile!.\nI\u0026rsquo;ll walk you through the steps as we go along but as an overview\nCreate a custom profile containing variables you might need or want to us in a script Deploy custom profile with Jamf School Create a script (or edit one you have) that reads the values in the custom profile Win at admin-ing and drink coffee To follow along you\u0026rsquo;ll need a way of creating a Profile. This could be something generic like BBEdit or Coderunner or something most specific to creating preferences such as PlistEdit Pro .\nThere are also an example profile over on my GitHub .\nStep 1: Creating a Custom Profile The First step is finding out the Jamf School variables available to you and choosing which ones you are going to need or want within your scripts, a full list can be found in the documentation Once you have choosen the values you will need to add them to the profile as a key / value pair.\n\u0026lt;key\u0026gt;AssetTag\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;%AssetTag%\u0026lt;/string\u0026gt; The key tag is the name for the value and its important that we keep these names sensible and to the point as its these keys we will be reading in our script but they can by anything. You will thank yourself in the future if you keep them simple and concise , I promise.\nAs for the value you will see that I have added the Jamf School variable (in the above example %AssetTag%. Remember the placeholder will be substituted for the \u0026ldquo;real\u0026rdquo; value once deployed by Jamf School, it doesn\u0026rsquo;t matter that you aren\u0026rsquo;t creating the profile in Jamf School. However, if you were to upload this to another MDM the chances are almost certainly zero that any substitution will happen. Maybe that MDM doesn\u0026rsquo;t use variables at all or uses a different syntax (for example Jamf Pro uses $variable$, opting for $ instead of %)\nIf this is the first time you\u0026rsquo;ve ever created a profile manually to upload to Jamf School (or any other MDM for that matter) I highly suggest you take my example profile and edit that as required, rather from starting from scratch.\nThere are a few values that you might want to change from the example\nPayloadType This is the preference domain that the profile will create and you will read the data from in your scripts. Again this can be anything you like but is usually a reverse domain. If you require to use you own preference domain be sure to change this but for the following examples I will assume the example default is bring used.\nPayloadOrganization At both the top level and within the PayloadContent. You may want to change this you match your organisational name\nPayloadDisplayName At both the top level and within the PayloadContent. The name displayed for the profile / payload in the system settings of macOS\nPayloadDescription The description displayed for the profile in the system settings of macOS\nFinally, if you have are comfortable with creating and editing a plist, you could instead create a plist and save it with the preferred preference domain (following the example it would be com.cantscript.localUserInfo) and upload it to Jamf School as shown in the next step. Jamf School will wrap the plist into a profile once uploaded / deployed.\nStep 2: Deploy Custom Profile with Jamf School With you custom profile prepared and saved, the next step is to upload it and deploy it with Jamf School. This is a fairly easy process but if you\u0026rsquo;ve never need to do this before, navigate to\nProfiles -\u0026gt; Configuration Profiles and click + Create Profile Choose Upload custom profile Navigate to the Custom Profile on your machine and drag to the Jamf School window Once uploaded click next Add a Profile Name (and a Description, as required) and click Next Click Finish on the next page Click Save You custom profile is now ready to be deployed. This can be done in a few ways with Jamf School, use your regular scoping methods to deploy to your target device(s) when ready (you should only deploy to your test device for now).\nIf you have used any of the user variables in your profile, you should consider scoping the profile only once the device has an owner assigned using smart groups. Otherwise the values will not be substituted and even if a owner is assigned after the fact the profile will need reinstalled On a test device you can verify that the profile has installed and that the %variables% have been replaced with the \u0026ldquo;real\u0026rdquo; values that are stored in Jamf School\nStep 3: Read Profile Values in a Script There are 2 ways that I know to read profile values within a bash script and I suspect there are more. The first is to use plistbuddy. A function can be written which enables you to read a specific key from the plist, offer a default value (if the key isn\u0026rsquo;t there) and store it an a variable. Thijs Xhaflaire uses this method in his DiskEncrypter project. An example of this function is\nmanagedPlist=\u0026#34;/Library/Managed Preferences/com.cantscript.localUserInfo.plist\u0026#34; readPref() { # $1: key # $2: default (optional) local key=$1 local defaultValue=$2 if ! value=$( /usr/libexec/PlistBuddy -c \u0026#34;Print :$key\u0026#34; \u0026#34;$managedPlist\u0026#34; 2\u0026gt;/dev/null ); then value=\u0026#34;$defaultValue\u0026#34; fi echo \u0026#34;$value\u0026#34; } And the usage to store the result to a variable within the script would be as below; where AssetTag would be the key we are looking for and \u0026quot;no data\u0026quot; would be the default value if there was no AssetTag key\nschoolAssetTag1=$( readPref assestTag \u0026#34;no data\u0026#34;) The second way I was shown by Armin Briegel aka scriptingosx . This method is more robust as it reads key values for the preference domain, no matter where the plist(s) are located and these locations are numerous. Its a little outside of the scope of this blog but there could be a plist com.example.plist in /Library/Preferences, ~/Library/Preferences and /Library/Managed Preferences. There is then a hierarchy in which preference level takes precedence, however Configuration Profiles (/Library/Managed Preferences) overrule everything else.\nThis method will read key values across the all possible preference locations and take the hierarchy into account when providing the result (this is different to method 1 which is read a specific plist in a specific location)\nAlthough this method is slightly different, for our use case here the results are largely the same with both. The method of reading the preference and key is once again wrapped into a function\nMANAGED_PREFERENCE_DOMAIN=\u0026#34;com.cantscript.localUserInfo\u0026#34; getPref() { # $1: key, $2: default value, $3: domain local key=${1:?\u0026#34;key required\u0026#34;} local defaultValue=${2-:\u0026#34;\u0026#34;} local domain=${3:-\u0026#34;$MANAGED_PREFERENCE_DOMAIN\u0026#34;} value=$(osascript -l JavaScript \\ -e \u0026#34;$.NSUserDefaults.alloc.initWithSuiteName(\u0026#39;$domain\u0026#39;).objectForKey(\u0026#39;$key\u0026#39;).js\u0026#34;) if [[ -n $value ]]; then echo $value else echo $defaultValue fi } Given the above, there is also a function that can check if the key is set and locked with a profile. Again, outside of our use case here but this can be used to ensure that the key value you are reading is from a profile and not elsewhere. I\u0026rsquo;ve used this in other projects to there is no profile installed and exit the workflow\ngetPrefIsManaged() { # $1: key, $2: domain local key=${1:?\u0026#34;key required\u0026#34;} local domain=${2:-\u0026#34;$MANAGED_PREFERENCE_DOMAIN\u0026#34;} osascript -l JavaScript -e \u0026#34;$.NSUserDefaults.alloc.initWithSuiteName(\u0026#39;$domain\u0026#39;).objectIsForcedForKey(\u0026#39;$key\u0026#39;)\u0026#34; } The usage to store the result to a variable within the script would be as below; where AssetTag would be the key we are looking for and \u0026quot;no data\u0026quot; would be the default value if there was no AssetTag key\nschoolAssetTag2=$(getPref assestTag \u0026#34;no data\u0026#34;) Now this is where I leave the hard work to you. How, what or why you need or want to use these variables is completely dependant on you and your environment (and even imagination). I\u0026rsquo;ve given an example script which simply uses SwiftDialog to display the information, thus showing I am \u0026ldquo;accessing\u0026rdquo; those Jamf School variables in a script (the script can be ran from Jamf School using the scripting module) even if in reality this example is nothing more than \u0026ldquo;show and tell\u0026rdquo;.\nOne Last Thing Since we now know how to read key / values from a profile. If you are also using Jamf Student or Teacher Jamf School sends an additional profile to macOS device automatically. This profile contains some information to configure the app so that you don\u0026rsquo;t have to manually log in, for example.\nIf you take a look in the system settings you can see the key / values it provides. Some of these are the same as you may have in your custom profile (which means you might not even need to create a custom profile, depending on your needs!) but has the additional keys of isTeacher (which can be true or false) and photo (with a value that is a URL to the stored picture in your Jamf School instance).\nSo if you use photos to attached you users in your deployment you now has access to personalise notifications (like my swiftDialog example) with the owners photo too.\nThe managed preference domain for this is com.zuludesk.macos.selfservice.plist and managed preference in general (incase you what to read some other profile some time) are located in /Library/Managed Preferences\nI have also included an altered script over at GitHub that contains this additional logic to use the photo and add a teacher or student app icon depending on if result of the isTeacher key.\nFurther Reading If this is your first time diving into profile and plist creation but its sparked an interest, here are a few things you might want to check out\nConfig Profile and manage ALL the things…just about by Bob Gendler swift-prefs by scriptingosx\n","date":"May 7, 2025","permalink":"/posts/using-jamf-school-variables-in-scripts/","summary":"Jamf School allows for variable substitution all over the place, just not in Scripts! Learn how to deliver Jamf School variables to devices for use in Scripts","title":"Using Jamf School Variables in Scripts","type":"blog"},{"content":"I\u0026rsquo;ve been toying with the idea of creating a blog for a little while. At some point last year I decided to get the domain cantscript.com with the thought of next step blog and then didn\u0026rsquo;t.\nI have since then however embraced the moniker of CantScript on GitHub and MacAdmins Slack.\nShall we start with that? Why go be CantScript?\nWell its a bit tongue in check but at the same time, if you were to aks me to my face I would tell you\n\u0026ldquo;I can\u0026rsquo;t script. I have all these ideas of what would be cool but mostly have no confidence that I could script anything to get the idea across the line\u0026rdquo;\nI still stand by that but as it turns out, its not all about scripting is it. In a day and age of MDM its all about profiles and payload too\u0026hellip;just to add to the complexities. Once again, if you\u0026rsquo;d ask me i\u0026rsquo;d reply with\n\u0026ldquo;well, I think it works this way but I\u0026rsquo;m not sure if doing it that way would work\u0026rdquo;\nEven so, I\u0026rsquo;m a trier and more often than not I find a way to get something of the ground and working. Even if by most peoples standing it held together with tape.\nAnd that there is what I\u0026rsquo;d like the very point of this blog to be. I want to share things that I\u0026rsquo;ve struggled with or might not know and make it easier for the next person. Might it be the best way? Nope, likely not in fact! but if it gets somebody else from A to B quicker than it did me and they can improve on it, then I\u0026rsquo;d say I\u0026rsquo;ve done what I set out to do.\nThere is then a second point that I\u0026rsquo;d like to bring up\u0026hellip;\nAs mentioned on the home page, this blog will be focused on Apple and Jamf and my background has been in the Education sphere. As such as have developed a specialism in Jamf School but if you are here already, you likely know this.\nSo expect that most posts here will be all about Jamf School, Jamf School workflows and cool things to when working with Jamf School.\nThere we have it, my fist post so that theres something here when I heopfuly actually publish this blog to the big ol\u0026rsquo;interwebs.\n🐜\n","date":"May 1, 2025","permalink":"/posts/so...i-decided-to-make-a-blog/","summary":"Hello World! My first post and a chance to discover what I\u0026rsquo;m hoping this blog is all about","title":"So...I decided to make a blog","type":"blog"}]