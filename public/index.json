[{"content":"For as long as I can remember the Jamf Connect dmg that is provided by Jamf included two elements (actually thats not entirely true, I do remember multiple dmg or pkg at the very very start\u0026hellip;turns out Im going to nerd snipe myself within the first sentence this blog). The first element is the login window \u0026ldquo;app\u0026rdquo;, this is the part that provides the custom experience provided by the IdP, which can be branded and configured in a number of different ways. The point of this element is to ensure a successful authentication with the IdP and then create a local user account which the matching username and password of that in the cloud.\nThe second element is what became the known as the \u0026ldquo;menu bar app\u0026rdquo;. The purpose of this element was to ensure that the local user account password continued to match that users cloud password that is with the IdP. If it were ever out of sync it would kick off a workflow for the user to sync everything back up again.\nThe menu bar app also enabled IT admins to add some quick links to open apps or websites and more recently was the method for users to invoke a priviledge elevation workflow , making them an Admin for a short, predefined amount of time (should you as an admin want to switch this feature on of course).\n\u0026hellip;and this, in a nutshell was Jamf Connect for a Jamf School Admin. However, if you\u0026rsquo;ve recently deployed Jamf Connect\u0026rsquo;s latest version while building a new Mac, you might have been confused to find that although the Login Window experience is what you expected, you know longer have the menu bar app and can\u0026rsquo;t find the app in your Applications folder either\nSo What Changed? At JNUC 2024, in the main keynote , Jamf introduced Self Service + . A evolution on Self Service that many Jamf and none Jamf customers alike know as the staple \u0026ldquo;Jamf App\u0026rdquo;. As time has gone on though its not the ONLY Jamf app and Self Service + looks to merge the Jamf end user apps into one. The Self Service + documents states\nSelf Service+ is an end user application for macOS that allows users to access content and updates that have been preconfigured in Jamf Pro. In addition to acting as an enhancement and eventual replacement for Self Service classic, Self Service+ provides a streamlined end user experience by consolidating Jamf end user applications into a single app.\nA few months ago we saw this concept start to take shape when Self Service + was able to tackle the tasks that the Jamf Connect menu bar app was used for. This meant for Jamf Pro Admins they could offer password sync and privilege elevations through the same app many of their user were already familiar with and not need to deploy the additional menu bar app.\nExpect, its part of the Jamf Connect dmg.\nSo, essentially admins were deploying the menu bar app for Self Service + to remove it and take over that functionality. Over the same few months, with Jamf Pro releases it\u0026rsquo;s become easier and more \u0026ldquo;default\u0026rdquo; to deploy Self Service + over Self Service Classic. As more people use Self Service +, less people need the menu bar app.\nTherefore, as of Jamf Connect version 3.0+, the dmg now ONLY contains the login window \u0026ldquo;app\u0026rdquo;\nWait A Second, I Thought This Was About Jamf School\u0026hellip; If you are reading this thinking\n\u0026ldquo;I don\u0026rsquo;t know what Self Service is\u0026rdquo; \u0026ldquo;Isn\u0026rsquo;t Self Service for Jamf Pro only?\u0026rdquo; \u0026ldquo;I Didn\u0026rsquo;t know you can use Self Service with Jamf School\u0026rdquo; Then thats sort of the point of this blog post! If you are thinking one or a combination of the above, that likely places you squarely in the Jamf School only Admin camp. Not knowing about Self Service or Self Service + as a Jamf School Admin is completely fine since it\u0026rsquo;s not used in Jamf School. If you, for whatever reason, have a foot in both Jamf Pro and School camps you likely also have questions about the use of Self Service in Jamf School.\nSimply, the answer is, Self Service + is only for Jamf Pro!\nThat does leave Jamf School admins with a bit of a gap, though. Jamf Connect no longer has the menu bar included and Self Service + isn\u0026rsquo;t for Jamf School. On the face of it, it looks like Jamf Connect can only provide the account creation element via the login window app. Bad luck if you want to keep your password in sync or offer a privilege elevation solution, right?\nWrong! 😜\nlets look at the options available to Jamf School Admins\nHow Do I Continue To Use The Menu Bar Features? Just to be clear, if you have currently deployed macOS devices with Jamf Connect menu bar app installed, you have nothing to worry about or act on. Upgrading to the latest version of Jamf Connect will not remove the menu bar app.\nThe following discussed options and flows are for consideration when you re-deploy devices or deploy new devices in your environment.\nThere are a few ways we can deal with things. The first 3 are more \u0026ldquo;out of the box\u0026rdquo; solutions but like with many things in life, if you are willing to put a little bit of work in, theres a forth solution. In my opinion, this gives the best result and would be the way I would tackle this challenge in the real world.\nUse Jamf School\u0026rsquo;s App Installers Continue to deploy Jamf Connect 2.45.x Deloy Jamf Connect 2.45.x, followed by 3.x Maintain a menu bar app only package and deploy the latest Jamf Connect pkg 1. Use Jamf School\u0026rsquo;s App Installers At the time of writing at least, if you deploy Jamf Connect through App Installers with Jamf School it appears that the version has been pinned at v2.45.1 which is the last version where the dmg contained both the login window and menu bar app elements.\nIf you choose this method it means that your devices will get the menu bar app but also will not get the latest version of the login window. This might not be an issue as a whole but if the login window gets an update in the future that requires a later version and that you want to make use of, you wont be able to.\nThe other consideration when using this option is how / when you deploy Jamf Connect. If you wish to have Jamf Connect as part of your onboarding flow and require the Jamf Connect login window to be the first place a user can sign in, App Installers is not the most reliable option. In this flow you\u0026rsquo;d want to deploy via an ADE Package .\n2. Continue to deploy Jamf Connect 2.45.x If you are using an ADE style workflow you will need to upload the package you wish to deploy, which means you can control the version of Jamf Connect gets deployed. This then becomes more of a question of where to get an older version of Jamf Connect from. Many users know that navigating to https://files.jamfconnect.com/JamfConnect.dmg will download the most recent version of Jamf Connect (this is the URL used in the Installomator label as well)\nHowever if you are a Jamf Connect or Jamf for K12 customer you are also able download Jamf Connect\u0026rsquo;s latest version or a previous version from Jamf Account .\nOnce logged into Jamf Account, and providing you have a licence and correct Jamf Account priviledges you can navigate to\nSolutions -\u0026gt; View Details in the Jamf Connect box Click downloads in the menu across the top Then in the drop down menu at the right of the window select the needed version, in our case 2.45.1 Once you have this dmg you extract the JamfConnect.dmg and upload it to Jamf School as an In-house macOS package This package is then ready to use in an ADE workflow and once deployed will install both the login window and menu bar app elements.\nLike with the above option the version of the login window is the older 2.45.1 version. If and when an update to the login window is released that has a feature you want to use in that ADE workflow, you\u0026rsquo;re kind of out of luck.\n3. Deloy Jamf Connect 2.45.x, followed by 3.x The obvious answer here is to deploy version 2.45.1 using one of the methods discussed above and depending on your needs and then install the most up to date version directly afterwards.\nLike I said before, if you have 2.45.1 already installed and then deploy version 3.x or above you the menu bar app isn\u0026rsquo;t removed (or a least at the time of writing). Doing this will ensure you get the menu bar app for your password syncing and privilege elevations as well as the latest and greatest in regards to the login window \u0026ldquo;app\u0026rdquo;.\nHow you install the latest version, weather thats app installers after the fact, another pkg maintained as an in-house macOS pkg or maybe even using a tool like Installomator , is up to you.\nHowever, for me this just feels like a false economy. Install one thing to immediately replace it with something else and even though Jamf Connect is a small pkg when you scale this for the numbers of your deployment, the idea of downloading \u0026ldquo;the same thing\u0026rdquo; twice just doesn\u0026rsquo;t feel right from a bandwidth point of view either.\nI\u0026rsquo;m not at all saying that this is wrong, I just think we can work a little smarter\u0026hellip;which brings me to\n4. Maintain a menu bar app only package and deploy the latest Jamf Connect pkg We\u0026rsquo;ve already covered the fact that the Jamf Connect dmg pre version 3.x contained both the login window and menu bar elements and anything version 3.x onwards, only the login window element.\nIf you take the pkg from both the latest and the 2.45.1 versions and inspected them with a tool like Suspicious Package , you\u0026rsquo;ll see that the only thing that looks different is the addition of /Applications/Jamf Connect.app in the 2.45.1 pkg. This suggests that the Jamf Connect.app is a self contained app and the other elements in the pkg are related to the login window.\nIf we were to extract the Jamf Connect.app and re-package, we could deploy this independantly of the latest version of the login window app, at any point we like. You might be reading this wondering how this is any better then installing one version and then another right over the top of it. If this is you, here are a few reasons I think this is the better way\nFirstly, now that the menu bar app is not contained in the newer versions we can, with some confidence, assume that Jamf will not be releasing regular, if any, updates to this app. This means, that although this is an extra pkg to add to my deployment I wont regularly (if ever) need to maintain versions of this. Build the pkg once and pretty much forget about it.\nI should point out this doesn\u0026rsquo;t mean we\u0026rsquo;ll never see an update to the menu bar app. Who knows if we\u0026rsquo;ll see any security patches or even a notice that is not supported on macOS of the future. So, depending on how far in the future you are reading this, maybe best to double check my thought process here! Secondly, the menu bar app is used in the user space, once the user logs in. Its not needed for ADE workflows, we only need the login window element for these workflows. That means I can deploy this pkg later in my deployment workflow, it hasn\u0026rsquo;t and shouldn\u0026rsquo;t be added as a ADE package. This is also less \u0026ldquo;wasteful\u0026rdquo; than deploying a \u0026ldquo;complete\u0026rdquo; Jamf Connect twice, one to get the menu bar app and another to update the login window.\nFinally, doing this means you can focus on ensuring the login window element is always the latest version in your ADE flow which means you can make use of the latest and greatest features that come along with the login window as time goes on. Again, how you get the latest version in your ADE workflow is going to be down to your onboarding flow but this way also lends itself very nicely to a Jamf Setup Manager workflow , where Setup Manager will always deploy the latest version of Jamf Connect (and means you\u0026rsquo;re not actually maintaining a \u0026ldquo;latest\u0026rdquo; Jamf Connect package in Jamf School at all).\nExtracting the Jamf Connect Menu Bar App If like me, you also think that this option is the best of all worlds, (the latest login window \u0026ldquo;app\u0026rdquo; and the installation of the menu bar app in a way that has the least maintenance involved) then you might be wondering how to extract and re-package the menu bar app. Well, if thats you, you are in luck\u0026hellip;.lets dig in.\nThe first thing that you will need is the 2.45.1 version of the Jamf Connect dmg which, as described above can be found from your Jamf Account. With this in hand mount the dmg and copy the JamfConnect.pkg to desktop (or other suitable location that works for you)\nTheres a few ways to extract the app from the package, with the simplest being install the pkg. Only this package has a postinstall script which changes your default login experience for that of Jamf Connect and if you do this on a production machine and / or don\u0026rsquo;t have a Jamf Connect configuration profile installed\u0026hellip;.you\u0026rsquo;re in for a bad time.\nAs such, Don\u0026rsquo;t install the package.\nInstead, if you haven\u0026rsquo;t already got Suspicious Package , go and download it. In my opinion it should be in every macadmins toolkit anyway. Once installed open the app and drag the JamfConnect.pkg into the app window, this will allow us in inspect whats in the package.\nClick on on the All Files tab and then the disclosure triangle next to Applications to expand, from here you will see the Jamf Connect.app. Right click the Jamf Connect.app and choose one of the export options (you can choose a location on the disk or quickly export to downloads).\nThe app is now extracted from the original package and ready for us to re-package.\nCreating a Jamf Connect Menu Bar App Only Pkg I\u0026rsquo;ve covered creating packages in a few blogs now and often point to Armins packaging book if packaging is new to you but in a recent scriptingosx blog Armin mentioned he will be soon pulling the book from the book store as there are elements that are out of date. However, if you follow the link to the blog he is rewriting the core elements and releasing them as a series (rather than a book) over at scriptingosx .\nUsually, I\u0026rsquo;d also mention Jamf Composer as an option for creating packages. Only this time we have to do a little bit extra which we can only do be scripting our package creation rather than relying on Composer.\nThanks to the recently re-written articles that Armin is releasing, when I came across a specifc problem while testing, my brain kicked me to remember this\nIn recent versions of macOS, pkgbuild will preserve extended file attributes in the payload. [\u0026hellip;] You generally do not want to have extended attributes be part of your package payload. This is especially true of quarantine flags!\nOut of context you might be a bit 🤷🏼‍♂️\nEssentially, since we downloaded Jamf Connect from the internet, macOS flags the app as risky and when you deploy the package it fails. Or more so, when you try to run the app after installing the package it will not run, instead displaying a message that it might be malware. Clearly, this is not a good experience for our end users or the behaviour we want.\nIn older versions of macOS the file attributes were not carried over with the file when being packaged so wasn\u0026rsquo;t something that we needed to worry about. As Armin points out however, in recent macOS they do carry over. So we need to be sure we remove any file attributes. This can be done with the following command\nxattr -cr \u0026#34;${projectfolder}\u0026#34; As noted above Jamf Composer does currently not have the the ability to remove the file attributes required for this workflow As usual I have added an example packager script to my GitHub .\nOnce you\u0026rsquo;ve downloaded the Repo you will need to add the extracted Jamf Connect.app to the payload/Applications folder before running the pkgr script.\nUsing the Jamf Connect Menu Bar App Pkg After the pkgr script has ran the resulting pkg will be on the desktop of your current user. From here you can treat the pkg as any other in-house pkg in Jamf School.\nNavigate to Apps -\u0026gt; Inventory and click + Add App Choose Add In-House macOS Package Navigate to the JamfConnectMenuBar.pkg on your machine and drag to the Jamf School window Once uploaded click save From here scope to the target devices as required but remember this now does not need to be part of your ADE packages. Instead you can just scope it like all other apps after the fact.\nThere is one additional thing and if you are already a Jamf Connect customer, you\u0026rsquo;re likely already doing this\u0026hellip;\nThe Jamf Connect menu bar does not automatically open when a user logs in but needs to be open / in the menu in order to do the continued password sync checks. To ensure that the app opens at login (and in actual fact re-opens any time its closed) there is a JamfConnectLaunchAgent.pkg found in the dmg under resources\nAt time of writing the JamfConnectLaunchAgent.pkg is available in both the 2.45.1 and 3.2.0 (latest current version) dmg\u0026rsquo;s This pkg should be deployed alongside the package you have created for the menu bar app (for extra credit, create a single package that includes both this LaunchAgent and the App). This way you can be sure the menu bar app is always open and able to operate.\nOne thing that I have noticed during my testing is that if the menu bar app is open while a new version of Jamf Connect (through app installers, Installomator, or that you\u0026rsquo;ve updated the \u0026ldquo;in-house\u0026rdquo; pkg in Jamf School) is trying to install, a user will get a pop up with wording to the effect of \u0026ldquo;Jamf Connect needs to update please close Jamf Connect\u0026rdquo;.\nOf course, if you use the LaunchAgent as suggested above, if the user chooses quit the app just re-opens and theres a loop created where the notification appears, user quits, menu bar re-opens, notifications appears, user quits etc etc.\nLogging out will enable the menu bar app to close and the update to take place.\nSince I\u0026rsquo;ve been working with a fairly current version, Im not sure if this happens every time theres an update or just the first time after you\u0026rsquo;ve installed the menu bar app independently.\nEither way, worth considering updating Jamf Connect when theres going to be no user logged in (for lab devices this is a little easier).\nTo Wrap Up To quickly wrap up. Things have changed with the Jamf Connect dmg due to the introduction of Self Service +, a tool that is available only for Jamf Pro.\nThis doesn\u0026rsquo;t mean a Jamf School admin can not make use of password syncing or privilege elevation, theres a few options available.\nIn this post we\u0026rsquo;ve covered a number of ways but I firmly believe maintaining your own menu bar app, by re-packaging it, is the best and most flexible way forward.\nTo make this even easier, the example pkgr script that I\u0026rsquo;ve shared on GitHub only requires you to add the menu bar app into a pre-defined folder and to run the script. There really is very little work if you do want to use this method.\nI started the post nerd snipping myself, so lets end with other nerd snipe. Depending on your licensing, in Jamf Account you might still be able to download Self Service + and deploy it in Jamf School. Self Service + will then show only the Jamf Connect Menu Bar features (other Self Service + features are for Jamf Pro only)\u0026hellip;.\nHowever, just because you can doesn\u0026rsquo;t mean you should! Its a confusing experience for your end users who will be used to using Jamf Teacher or Student for self service purposes but then need to use an app called Self Service + if they want to make themselves an admin for a period of time or want to handle a password change.\nSo, just no\u0026hellip;.\n","date":"September 8, 2025","permalink":"/posts/continue-to-sync-passwords-with-jamf-connect-and-jamf-school/","summary":"In recent releases of Jamf Connect the menu bar app is not included in favour of using Self Service + for Jamf Pro Admins\u0026hellip;but what if you\u0026rsquo;re a Jamf School Admin wanting to keep local and cloud passwords in sync with Connect? In this blog we explore the options and workflows.","title":"Continue To Sync Passwords with Jamf Connect and Jamf School","type":"blog"},{"content":"In the first part of this blog, we looked at how we could add the functionally that Jamf Setup Manager provides by using scripts delivered with an Automated Device Enrollment package and how to access the Jamf School API within these scripts.\nIf you\u0026rsquo;ve found yourself here without first reading part 1 , I strongly recommend going read this before continuing By the end of the last blog I\u0026rsquo;d covered the ins and outs of using the Jamf School API within scripts, things you will want to consider from a security point of view and what we can do to reduce some risk. However, the only endpoint that we\u0026rsquo;d considered was the refresh device endpoint, as that was a challenge that I had been trying to overcome for a specific workflow. Of course this isn\u0026rsquo;t the only endpoint that might be useful.\nConsidering Jamf School API Endpoints With the realisation that I could call an API Endpoint via a script as part of a Setup Manager workflow, I started to wonder what other endpoints I could access. Of course the answer to this is \u0026ldquo;well anything the API provides\u0026rdquo; but that in of itself isn\u0026rsquo;t that useful even if true. So I reframed the question to \u0026ldquo;which endpoints are available that could provide quick and easy value to the onboarding process\u0026rdquo;, after all Setup Manager is all about the onboarding process.\nTheres likely to be others but the first few that came straight to my mine were\nNotes (adding / removing entries to the devices\u0026rsquo; inventory record under the notes attribute) Asset Tag (adding / removing entries to the devices\u0026rsquo; inventory record under the assetTag attribute) Device Static Group (adding / removing the device to / from a pre-existing static group) Owner Assignment (adding, amending or removing the devices\u0026rsquo; user assignment) Although the ability to add / remove a device to / from a static group is useful, in my environment I tend to use smart groups almost exclusively, so that didn\u0026rsquo;t appeal to me as much as others.\nI found the notes and asset tag endpoints very interesting since in Jamf School we can use these attributes as criteria in smart groups (there will be more on this a little later).\nWithout a shadow of a doubt the thing that piqued my interest the most was the owner assignment of the device because, for Jamf Pro, Setup Manager was able to provide a workflow for IT depts to configure the device on behalf of a user, assigning that user as part of the flow but while not needing them to be present.\nThat being the key here, the user not being present, the admin still being able to take the machine through the Setup Manager workflow and not needing to actually log in to the device while ensuring that the device is assigned to that user (so that any user specific management is applied)\nThis is very different from the end user enrolling their own device where we can get the correct user assignment by using an authenticated enrolment.\nAlso an Admin not needing to login to the device to see that the onboarding workflow is successful can be super useful for FileVault, Bootstrap or MDM enabled users workflows that revolve around the first user created / logging in.\nWhat Is A Single Touch IT Driven workflow? Before we continue, we should outline what a Single Touch IT Driven workflow is and rather than reinvent the wheel, this is what the Setup Manager documentation states\nIn a single touch workflow a tech performs or monitors the initial setup of a device to the point just before the user creates their account. While Setup Manager can run zero-touch workflows, it was built specifically with single-touch workflows in mind.\nA single touch workflow can be as easy the tech unpacking the Mac (erasing it with an MDM command or restoring it with Apple Configurator when necessary), connecting it to network, stepping through the initial Setup dialogs, optionally entering the asset tag or other data, monitoring Setup Manager\u0026rsquo;s process until it is finished and then handing over or sending the Mac to the designated end user who continues the setup and creates their account in Setup Assistant.\nAs I\u0026rsquo;ve now said a few times, this is really useful for admins providing a \u0026ldquo;white glove\u0026rdquo; service for their end users. What do I mean by \u0026ldquo;white glove\u0026rdquo;? well it could mean different things for different people but essentially the reason that IT teams might offer a white glove process\nYounger users who might have problems stepping through the enrolment without supervision VIPs - senior leadership or this type of individual who you want to give a special experience too Staff member\u0026rsquo;s that don\u0026rsquo;t feel super confident with technology Provide additional value for your IT dept / team within your institution For resellers / MSPs to offer as a service so that their customers don\u0026rsquo;t need to worry about any kind of setup, it just lands onsite \u0026ldquo;ready to go\u0026rdquo; This flow can go one step further if you are also utilising Jamf Connect. Again stated in the Jamf Setup Manager documentation\nYou can use a combination of Jamf [School], Setup Manager and Jamf Connect, to get a tighter deployment, user assignment and account creation process. This requires a bit more setup and configuration. This workflow allows the tech to monitor the Setup Manager workflow, enter device specific data such as an asset tag and assign and lock the device to a different user, without requiring the end user\u0026rsquo;s login credentials.\nThis additional integration with Jamf Connect means that the only person that can login to this device is the person who has been assigned during Setup Manager. Which if you are shipping devices to your end users is another nice \u0026ldquo;lock down\u0026rdquo; should the device end up in the wrong hands.\nFor this blog, we will be going for this full integration using Jamf School, Setup Manager and Jamf Connect. For the additional Jamf Connect integration you\u0026rsquo;ll want to read my previous blog, macOS Authenticated Enrolment Passthrough in Jamf School , paying special attention to the section Additional Jamf Connect Profile. We\u0026rsquo;ll need this for our workflow here but I wont be going over how to create this profile in this blog.\nSubmitting User Data Via Setup Manager There are a number of steps required to create this workflow with Jamf School covering built in features of Setup Manager, scripts, API calls and smart groups in Jamf School. The broad stoke steps are\nStep 1: Configure Setup Manager to Accept Admin Input Step 2: Parse this input, prepare and make an API call Step 3: Deliver additional Jamf Connect Profile after user assignment The first thing that we need to understand is how to configure Setup Manager to accept admin input but just as importantly how this data is stored so that we can access it later in our flow.\nSince there is plenty of documentation around configuring Setup Manager and I covered out to update your current Setup Manager items in part one. Here we\u0026rsquo;ll just talk about the additional keys you will need to add to make use of this workflow. The Setup Manager documentation explains the userEntry enrolment action but is very focused on Jamf Pro. As such I wont go over the full details of the userEntry action but instead show you the configuration that you need for Jamf School and this workflow. This being said, there are some validation options that might be useful for your use case which will also work in addition to what I show you, so I do recommend taking a look at the documentation.\nThe userEntry key is one of 2 extra keys that we\u0026rsquo;ll need to add to our Setup Manager configuration profile. The userEntry key is added as a top level key.\nFor our usage we need to add the sub-keys realName and email. Since the term realName isn\u0026rsquo;t very clear, I also provided a label and a placeholder. The userEntry key in my configuration profile would be as follows\n\u0026lt;key\u0026gt;userEntry\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;email\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Use your School email address\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;realname\u0026lt;/key\u0026gt; \u0026lt;dict\u0026gt; \u0026lt;key\u0026gt;label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Full Name\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;placeholder\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;John Smith\u0026lt;/string\u0026gt; \u0026lt;/dict\u0026gt; \u0026lt;/dict\u0026gt; The subkeys used relate to a Jamf Pro deployment and its important that the correct key is used so that the Jamf Pro binary submits the correct attribute for the devices. For Jamf School, this isn\u0026rsquo;t the case. We could use any one of the subkeys to collect the data, as you\u0026rsquo;ll see later on, we \u0026ldquo;manually\u0026rdquo; search for the subkeys in a script. Despite this, I would recommend that we use subkeys that make sense for the data we are collecting as a best practise (and to make it easier for you or somebody else to understand whats going in on when you\u0026rsquo;ve not looked at the flow for months) The second key that we need to add is an enrolment action and is waitForUserEntry. This means that the Admin must enter the details and press the \u0026lsquo;save\u0026rsquo; button before any other enrolment actions are performed. This can be located where ever makes the most sense in your enrolment actions, for me, since its the the point of the IT Driven workflow, I think its important enough to be one of the first actions. The waitForUserEntry key in my configuration profile would be as follows (its important to note that the waitForUserEntry key has a value of string the value should be empty)\n\u0026lt;key\u0026gt;label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Enter User Details\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;waitForUserEntry\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;\u0026lt;/string\u0026gt; Although technically the waitForUserEntry key is not required, since we\u0026rsquo;re going to perform an API call as part of the bigger flow requiring this step to be completed before we attempt to make the API call is just logical and would be a strong recommendation from me. There is an example configuration profile over at my GitHub in the repo related to this blog but be aware we\u0026rsquo;ll need to create the scripts in the next step before we cover everything in that example profile.\nParsing User Input For API Call Adding these keys to the Setup Manager config profile on its own wont do much else than ask the user to enter some details and move on. Remember, since this isn\u0026rsquo;t Jamf Pro, with the binary that can natively update device inventory data, Setup Manager doesn\u0026rsquo;t no what else to do with the data other than just store it.\nThe fact that Setup Manager does store that data locally however is a good thing for us, in fact its essential for the next part.\nWhenever the userEntry option is used Setup Manager writes this data to a txt file located at /private/var/db/SetupManagerUserData.txt or /Users/Shared/SetupManagerUserData.txt when using debug mode. This means we can take this stored information and using the Jamf School API assign an owner (user) to the device with a script.\nTheres a few things that we need to do within the script.\nGet the UDID of the device as this is needed to identify the device via the API Read the realname value from the SetupManagerUserData file Make an API call to Jamf School to get a list of users Filter the results to find the realname (aka FullName) in Jamf School and extract the userId, this is needed to assign the user to the device Make an API call to actually do the assignment now we have the device UDID and userId Make an API call to refresh details so the inventory data in Jamf School is most update to date (and will be important for the next step, but we\u0026rsquo;ll put a pin in this for the second) In doing this we\u0026rsquo;ll also build in some error handling so that if anything fails the script fails gracefully and gives some feedback in the Setup Manager log\nWorth noting here that although the script will fail gracefully, the Setup Manager tile will still show as completed with success. Get the UDID of the device This is a pretty standard line of code and can be gathered directly from the device. It looks something like\n#Find UDID of device udid=$(system_profiler SPHardwareDataType | awk \u0026#39;/Hardware UUID/ {print $3}\u0026#39;) Read the realname value from the SetupManagerUserData file I\u0026rsquo;ve built a function that first checks that the SetupManagerUserData is on the device in the known location for standard or debug use and if not provides some logging.\nIf the file exists that we try and extract the value from the realname line.\ngetUserAssignment() { # Logic to enable script to work in both standard and debug modes local prodLoc=\u0026#34;/private/var/db/SetupManagerUserData.txt\u0026#34; local debugLoc=\u0026#34;\u0026#34; local file # Check which file exists if [[ -f \u0026#34;$prodLoc\u0026#34; ]]; then file=\u0026#34;$prodLoc\u0026#34; elif [[ -f \u0026#34;$debugLoc\u0026#34; ]]; then file=\u0026#34;$debugLoc\u0026#34; else #Throw error if file not found echo \u0026#34;Error: SetupManagerUserData.txt not found in expected locations.\u0026#34; \u0026gt;\u0026amp;2 return 1 fi # Extract realname value local userAssignment userAssignment=$(awk -F\u0026#39;: \u0026#39; \u0026#39;/^realname:/ {print $2}\u0026#39; \u0026#34;$file\u0026#34;) echo \u0026#34;$userAssignment\u0026#34; #Return realname value from file } You can extract other data out of the file using the same code but changing the realname value for something else. If you\u0026rsquo;ve followed my guide you wont need to change this but if you used another value or want to expand on what I\u0026rsquo;ve done you can. Make an API call to Jamf School to get a list of users With this information in hand we can make an API to Jamf School to list the users in the system and then filter out the user that we are looking for to extract the userId. We need this step as you cannot assign a user via the API with a FullName or username, it must be the userId\nTo make things easier here I\u0026rsquo;ve used jq which comes shipped with macOS since macOS15. If you are running devices before macOS15 if you wish to use the example as is you\u0026rsquo;ll need to install jq \u0026lsquo;manually\u0026rsquo; If the user isn\u0026rsquo;t found then we provide and error and log\ngetUserId() { local inputUser=\u0026#34;$1\u0026#34; # Accepts the username as an argument # Fetch the users from the API local getUsers=$(curl -s -X GET https://\u0026#34;$schoolInstance\u0026#34;.jamfcloud.com/api/users -H \u0026#34;Authorization: Basic $base64Key\u0026#34;) # Extract user ID using jq local userId=$(echo \u0026#34;$getUsers\u0026#34; | jq --arg name \u0026#34;$inputUser\u0026#34; -r \u0026#39;.users[] | select(.name == $name) | .id\u0026#39;) #Check to see if userID is found, if not assume user was not found in Jamf School #and throw error if [[ -z \u0026#34;$userId\u0026#34; ]]; then echo \u0026#34;Error: $inputUser not found in Jamf School.\u0026#34; \u0026gt;\u0026amp;2 return 1 fi echo \u0026#34;$userId\u0026#34; # Return userId from API Call } Its at this point that I should point out some things that I\u0026rsquo;ve glossed over until now. Generally speaking its at this step that you\u0026rsquo;ll have the most chance of things going wrong, failing and providing an error. Thats not to say we can\u0026rsquo;t do thing prevent this from happening (or at least way less regularly) more over I\u0026rsquo;ve just been lazy when providing you with an example script! Here are some things to consider\u0026hellip;.\nThis whole workflow requires that the users you are assigning to the devices are already synchronised into Jamf School. Now theres a whole heap of things that I could spend multiple other blogs writing about when it comes to importing users but if you\u0026rsquo;re users are already in Jamf School, cool! If not and you need a helping hand to get started I suggest watching my JNUC session from 2024 called Scaling Success - Mastering Large-Scale Jamf School Configuration (from around 21:53 until the end) The userEntry form is susceptible to human error, aka typos! (I should know, I don\u0026rsquo;t think I\u0026rsquo;ve released a blog post yet without at least one in it). If I were to enter a persons incorrectly, the whole thing fails!\nWe also ask for the users realname (or FullName) and email in the form but in the script I don\u0026rsquo;t actually do anything at all with the email address in terms of validation. I only search for the matching realname.\nTo reduce the errors brought on by typos you could (and most likely should) also use the email address you captured and filter for the user on that as well. You\u0026rsquo;d then likely match if realName OR email address is matched (whats the likelihood you\u0026rsquo;ll make a typo in both entries?)\nTo harden this you could (and again probs should) use the endUsername key in the config profile and enter a users username as well and then add this to your matching logic (or completely replace realname with endUsername incase of users with the same full name)\nIf you add this in the same function then you will only still need to make the API call once even though you might quiz the data multiple times.\nFinally, to really mitigate errors as much as possible, within the Setup Manager config profile the userEntry key does allow for some regex validation so you can ensure that the email domain is valid or that a username must be firstIntial.lastName etc etc Make an API call to do the Assignment With all of the information in hand we can now to the user assignment via the API\nassignAUser() { curl -X PUT https://\u0026#34;$schoolInstance\u0026#34;.jamfcloud.com/api/devices/\u0026#34;$udid\u0026#34;/owner \\ -H \u0026#34;Authorization: Basic $base64Key\u0026#34; \\ -H \u0026#34;content-type: application/json\u0026#34; \\ -d \u0026#34;{ \\\u0026#34;user\\\u0026#34;: \\\u0026#34;$assignedUserId\\\u0026#34; }\u0026#34; } Make an API call to refresh details of the Device Inventory You\u0026rsquo;ll notice this is a very similar call to the above but is something that must be done after the assignment\nupdateDeviceDetails() { curl -X POST https://\u0026#34;$schoolInstance\u0026#34;.jamfcloud.com/api/devices/\u0026#34;$udid\u0026#34;/refresh \\ -H \u0026#34;Authorization: Basic $base64Key\u0026#34; } Full Script I\u0026rsquo;ve highlighted the main elements of the script but to run them like this wouldn\u0026rsquo;t give you the result you needed. I\u0026rsquo;ve included a full script example on GitHub This script should then be added to the package that you deliver to the device in your Automated Device Enrolment Package and the Setup Manager configuration Profile should point have an enrolment action with a shell command pointing to this script directly after your waitForUserEntry action (See the full example configuration profile )\nDeliver Additional Jamf Connect Profile After User Assignment Without doing anything else an Admin could enrol the device and assign it to the end user. In this case after Setup Manager has finished you\u0026rsquo;d likely have Setup Assistant ask the user to create a local user account. At this point the Admin could shut down the machine, box it up and ship it out to the end user. All they\u0026rsquo;d need to do is turn it on, follow the remaining setup assistant steps and they\u0026rsquo;d be up and running, all with the apps they need installed.\nHowever, if you are using Jamf Connect, we can make this experience even more customised, tighter and secure (since the only person that can login to this device is the intended end user, even if its somebody else from you school that receives the device).\nAs I pointed out towards the start I\u0026rsquo;m not going to go over the Additional Jamf Connect Profile, how it works or what you need (see the previous blog for that) but instead how to deploy it within the context of this workflow.\nWithin the script above there is one final API call that I make which sets the devices assetTag, this then adds the device into a smart group, which in turn deploys the additional configuration.\nupdateAssetTag() { curl -X POST https://\u0026#34;$schoolInstance\u0026#34;.jamfcloud.com/api/devices/\u0026#34;$udid\u0026#34;/details \\ -H \u0026#34;Authorization: Basic $base64Key\u0026#34; \\ -H \u0026#34;content-type: application/json\u0026#34; \\ -d \u0026#34;{ \\\u0026#34;assetTag\\\u0026#34;: \\\u0026#34;User Details Entered\\\u0026#34; }\u0026#34; } Its important that the profile doesn\u0026rsquo;t get delivered to the device until after the user assignment has happened since it uses Jamf School variable\u0026rsquo;s and with no user assignment (If the profile got delivered after enrolment but before the user assignment for example) the profile would just use that standard variable tokens.\nI have a previous blog on the topic of Jamf School Variables if this is something that is new to you As well as the extra API call within the script, we\u0026rsquo;ll need to do some work in the Jamf School console and set up a Smart Group that looks for a certain value in the assetTag field of the device inventory. You\u0026rsquo;ll notice that in the example I use the value of User Details Entered and this is what will build the Smart Group on. You can use whatever value you like and adjust the Smart Group accordingly.\nTo configure the Smart Group log in to Jamf School and navigate to\nDevices -\u0026gt; Device Groups -\u0026gt; click + Add Group Name the profile (I went with \u0026ldquo;Jamf Connect Enrol User Details\u0026rdquo;) -\u0026gt; click Smart Group Navigate to Profiles, choose your Jamf Connect Additional Profile and choose Automatic Navigate to Members -\u0026gt; + Add Filter and select Asset Tag, equals and then type User Details Entered click Save With this in place once Setup Manager finishes and any additional Setup Assistant panes are completed you will see the Jamf Connect Window asking for the password (and only the password) of the assigned user and only that user can log into the device for the first time.\nAs an admin we are in the same position as before we\u0026rsquo;ve enrolled the device, ensured it has all the apps we need, assigned it to the user and once its at the Jamf Connect window we can turn off, box up and ship to our end user.\nJamf Setup Manager has enrolment action userEntry and waitForUserEntry enabled Admin enters end user details, which are written to local file. Setup Manager holds here until user entry is complete Script is called which parses data from local file, makes API calls to retrieve userId. Assigns user to device, writes a value to the assetTag attribute and triggers a refresh details via API Jamf Setup Manager then performs the rest of the enrolment actions Concurrently, due to the API calls performed at step 3, Jamf School recalculates Smart Groups. Device falls into group targeting assetTag value of User Details Entered and delivers additional Jamf Connect Profile Once Setup Manager has finished an additional and final script is trigger which deletes the central script location so that they are no longer on the device The user lands on the Jamf Connect login window, displaying the assigned users name and asking them for their password. The device is ready to use ###Additional Details: Additional Jamf Connect Profile After User Assignment\nUsing The Asset Tag Device Inventory Attribute This flow requires the assetTag device attribute which might be a problem if you already use the assetTag for other purposes in your environment.\nIf this is the case you can instead use the notes attribute in the same way since you can build a Smart Group using this attribute just as you can with assetTag and the API call to write data here is almost identical.\nIf you are also using the notes field already, you can still use this flow but it requires a little more work (and testing for robustness) where by you add this additional data to the existing data. When you add to either of these attributes using the API it over writes what is already there. Therefore if you want to add the User Details Entered text as an addition you would need to\nRead any data already in the assetTag or notes attribute via the API (which is given by default with the GET devices endpoint) Append User Details Entered to whatever data is already there Make the API call, writing the new string which includes current data+User Details Entered Prior to this you will need to amend your \u0026ldquo;Jamf Connect Enrol User Details\u0026rdquo; Device Smart Group so that the criteria now states contains and not equals. This would also be the case for any Device Smart Groups you have configured that makes use of the \u0026ldquo;current data\u0026rdquo; as a criteria.\nI said it already but once more\u0026hellip;..if using this \u0026ldquo;appending\u0026rdquo; method, test, Test, TEST\nDo I need to Have Entered an Email Address at User Entry? Remember above how I said that in my example I don\u0026rsquo;t actually use the information collected in the email value from the userEntry (while remembering I said you should for validation)?\nIf you\u0026rsquo;ve also read the blog about the Additional Jamf Connect Profile you\u0026rsquo;ll have seen that you DO need to provide the email address.\nSo whats the deal!? Do you need it or not?\nSimply, you DONT need to collect it for this profile (although again, you should for filtering out the user and validation). The email address to populate this profile is pulled from the user record in Jamf School, so it is important that this record does have the correct IdP corresponding email.\nWhich then leads me to\u0026hellip;.\nTypo Trouble As I said before typo\u0026rsquo;s can lead to users not being found, matched ad assigned to the device. In the workflow without the Jamf Connect pre-filled details in the mix, this might lead to a device not assigned to a user (which in turn might lead to some missing apps or config)\nIf there is a typo in which leads to an incorrect / no user assignment with this extra Jamf Connect piece in play, you\u0026rsquo;ll end up at a Jamf Connect window that is asking for a password for a user called %FullName% and an email of %Email. Clearly your IdP wont have a user with these details and you\u0026rsquo;ll be stuck. Remember, with this profile in place THE ONLY person that can log in for the first time is this pre-filled user.\nThis then makes all my points about ensuring that there is proper user validation in the \u0026ldquo;assign a user\u0026rdquo; script even more important. Device Re-enrolments Theres one thing final thing about this flow if you are using the extra Jamf Connect piece and thats around re-enrolments. Since we\u0026rsquo;ve written to the assetTag attribute its worth knowing that this persist with a re-enrolment, this means the Smart Group looking for the User Details Entered will pick up the device as soon as its enrolled again.\nOnly, we only want the the additional Jamf Connect profile to land on the device after user assignment to prevent the default variable tokens.\nAs such my recommendation was going to be (hang on there) when wiping devices and enrolling them, ensure that you are also removing the assetTag value either via an API (which you could also add a wipe device command to as well, to automate both actions) or the console.\nHowever, that was going to be the advice.\nTurns out through my testing, I\u0026rsquo;ve had times when I\u0026rsquo;ve forgotten to do this and everything has still worked and I believe this is because of the refresh details API call that I make in the \u0026ldquo;assign user\u0026rdquo; script.\nYes, on re-enrolment the additional Jamf Connect profile will either land on the device after enrolment with either the previous users details or the default variable tokens (depending on your environment setup) but once the new user assignment happens via the script and the refresh details is completed, Jamf School understands there has been a change of values in these attributes and re-issues the Additional Jamf Connect Profile with the most current variable values (the user you\u0026rsquo;ve just assigned).\nSince Setup Manager will have many other enrolment actions (providing you do this towards the start of your flow, which I highly recommend) the device has plenty of time to receive the updated profile before landing on the Jamf Connect window.\nWhich method should you take? test, Test, TEST! From my testing both work but you should test in your environment and figure out which is best for you.\nAs I sit here writing this, I\u0026rsquo;ve realised its also entirely possible I\u0026rsquo;ve seen this behaviour (without needed to removed the assetTag value) as I\u0026rsquo;ve used the same user on re-enrolment and as such its just \u0026ldquo;worked like magic\u0026rdquo;. So again, please test before deciding which route you should use. To Wrap Up Part 2 After reading this part you might be sitting there thinking theres a lot of extra work to get this stood up and / or theres a lot of point where this potentially could go wrong.\nI\u0026rsquo;d struggle to disagree with both of these because this extra part of the puzzle described here wont be for everyone who uses Setup Manager. You\u0026rsquo;re \u0026ldquo;worth it\u0026rdquo; workflows were all in Part 1 However\u0026hellip;.\nIf your environment requires this single touch IT driven workflow I will say with some certainly that this extra work is minimal compared to the time and effort you currently have to put in to \u0026ldquo;white glove\u0026rdquo; the onboarding. Remembering as well that once you\u0026rsquo;ve got your script tuned in (80% of it is already in the example, you really only need to work on the validation part based on my recommendations) the extra work is done and you are \u0026ldquo;banking cash\u0026rdquo; with every device you onboard after that.\nIf you\u0026rsquo;re in the \u0026ldquo;could go wrong\u0026rdquo; camp, remember these few things. I was lazy with my script and didn\u0026rsquo;t deal with any validation, which in a production environment I 100% would. With the validation in place, 90% of the \u0026ldquo;could go wrong\u0026rdquo; parts fizz away. It will be IT professionals, your IT crew, that will be running through the Single Touch IT Driven workflow, these are people you trust. Explain to them the importance of making sure things are spelt correctly. This carefulness along with validation in the script will go along way to making this a success.\nFinally, if things do go wrong, as long as its not on every device onboarding (in which case it suggests something else and bigger is wrong anyway), its not the end of the world.\nLets say that you get to the Jamf Connect screen and it says the wrong user\n\u0026hellip;.as I\u0026rsquo;d hope the admin / IT professional checks this before boxing the device up or handing it out\u0026hellip;\nYou wont need to nuke and pave, simply logging into the Jamf School console, assigning the device to the correct user, performing a refresh device and allowing the device to check in, will fix the issue.\nAgain, the things discussed in part 2 wont be for everyone and thats completely fine, don\u0026rsquo;t worry about it but keep it in mind as one day it might just be the solution you need.\nFinal Thoughts Across the last 2 blogs we\u0026rsquo;ve discussed advanced workflows we can perform with Jamf Setup Manager and Jamf School. At times we\u0026rsquo;ve \u0026ldquo;coloured outside the lines\u0026rdquo; to get the results we needed but if your environment allows you to do so, we\u0026rsquo;ve added a a feature set that gives you and your team a power house of an already crazy good onboarding tool and flow.\nRegardless of if end users are onboarding their own devices, you\u0026rsquo;re an IT dept onboarding devices for your Teachers, Students or VIPs or you\u0026rsquo;re a reseller / MSP provide a service for your school customers, we\u0026rsquo;ve got something in these advanced workflows for you.\nNow if only some of the things we\u0026rsquo;ve discussed here specifically with how Jamf School works were baked into Jamf Setup Manager. If only I knew the guy that made it 😉\nWe can hope, right 🤞🏼\n","date":"August 9, 2025","permalink":"/posts/advanced-setup-manager-flows-in-jamf-school-part-2/","summary":"In the first part of this blog we looked to power up the feature set of Jamf Setup Manager with Jamf School. Using this as a foundation, in the second part we\u0026rsquo;ll create a Single Touch IT Driven workflow perfect for any IT dept providing a white glove service for their end users","title":"Advanced Setup Manager Flows in Jamf School, Part 2","type":"blog"},{"content":"Hopefully by now most people in the Apple-Jamf community will have heard, seen or tested Jamf Setup Manager. If you\u0026rsquo;ve spoken with me anytime in the last 18 or so months about macOS and Jamf School, you\u0026rsquo;ll know it\u0026rsquo;s a staple of my Jamf School onboarding flow.\nJust incase you\u0026rsquo;ve not come across Jamf Setup Manager yet, in a nutshell its a macOS onboarding tool that can be ran at the Setup Assistant fundamentally changing the flow mac Admins have been using for years. Instead of turning on a device, having it enrol into MDM, configuring a local user, landing on the desktop and then providing a hold screen for the end user while we install all the apps needed; Setup Manager instead allows us to hold the user right after enrolment, meaning once the user is at the desktop they are ready to go.\nFor more information about Jamf Setup Manager in general, visit the GitHub repo . For more information about Setup Manager and how to use it with Jamf School, I recommend the second part of a blog I wrote on jamf.com: Part 2: Customize your onboarding experience with Jamf Setup Manager The State of Play As I sit here and write today, Setup Manager is on version 1.3.1 and although there has been a number of advancements in just a few versions, one thing has stayed the same. The actions that you can perform with Jamf School and Jamf Pro are different. Now this is fine because it boils down to the fact that Jamf Pro is built differently to Jamf School and fundamentally these differences stem from the fact that Jamf Pro deploys a dedicated binary for macOS, and enables additional functionally over MDM.\nNow, this is all important for us to understand before we dig into the advanced workflows because without this context we don\u0026rsquo;t know what we are aiming for.\nThanks to the Jamf Pro Binary here are a few things that we can do extra with Jamf Setup Manager when using Jamf Pro (this might not be the extensive list, but they are the things you need to know about to follow along with the rest of the blog)\n1) Call A Policy Jamf Pro has a concept called Polices. These are actions that go beyond MDM, there are many but the ones to focus on here are to run a script or install a package at a given trigger or on demand. Due to the ability to call a policy on demand, Jamf Setup Manager is able to invoke a policy in a programatic way. For example do X before calling policy Y (which maybe runs a script that is related to X having been completed first).\n2) Update Device Details The Jamf Pro binary enables admins to use the command line to update device details. Again theres a host of things but think user assigned to the device, the asset tag, a department, the name of the device etc etc. Things that show up as part of the device inventory data about the device but not necessarily directly related to management items. Since the binary can be invoked via the command line for these tasks Jamf Setup Manager can update the inventory data for the device in the Jamf Pro device record.\nIn part this then enables\u0026hellip;..\n3) A Single Touch, IT Driven workflow Here we need to put ourselves in the mind of an IT professional who sets up a device on behalf of the end user and then maybe ships it off to them somewhere else on the planet (or in less exotic cases, the users desk).\nThe Single touch IT Driven workflow enables the admin to enrol the device, ensure that all essential items are installed and assign the device to the correct end user all without ever needing to actually log into the device.\nIf you are in an environment where your end users aren\u0026rsquo;t setting up their own devices or are an MSP of some kind this \u0026ldquo;white glove\u0026rdquo; flow is a nice service to have.\nMaybe you\u0026rsquo;re now finding yourself asking the question so what can be done with both Jamf School and Jamf Pro. Im glad you asked\u0026hellip;.although the above is specific to Jamf Pro, both Pro and School can perform the below essential enrolment actions\nInstall apps using Installomator (which is built into Jamf Setup Manager) Check to see if a file exists in a file path (known as a watch path) Present a user with a wait tile for a given time with customized text and icons Run a shell command (a single line of code, as if ran in terminal) With these 4 enrolment actions alone and thanks to advancements in Jamf School in the form of \u0026ldquo;ADE Packages and Profile\u0026rdquo; late last year, we can already majorly power up an macOS deployment.\nIm not going to go into the benefits and how Jamf Setup Manager powers up macOS deployments here since I want to take the time to talk about the next steps, powering up the power up. However, this post pretty much sums up how awesomely simple it can be for an end user The Problem that Inspired the Solution With that \u0026ldquo;level setter\u0026rdquo; and background knowledge out of the way, lets actually talk about how I got to working on these advanced workflows in the first place and what these advanced workflows actually are.\nSPOILER ALERT: They are the extra things that we can do with Jamf Pro that I mentioned above, even if indirectly 😉\nI\u0026rsquo;ve had recent interaction with an admin in an education environment using Jamf School. They already had a successful iPad deployment and were moving forward with their macOS fleet. They had created a macOS onboarding workflow but were coming up against some issues, I wont go into the full detail but there were two things we ended up tackling with Setup Manager.\nIssue 1: The need to run a script at a chosen time Issue 2: The need to update the device inventory at the end of Setup Manager flow\nNow looking at the above you\u0026rsquo;ll quickly be able to see that if the admin was using Jamf Pro and Setup Manager, these are out of the box solutions.\nLets be clear on the actual issues.\nRunning A Script We can run a script with Jamf School as long as you have enabled the scripting module . Once you have added a script to Jamf School, there are a number of triggers to run the script from once (which runs the script pretty much right away) to on a schedule or to login.\nThe issue here was that the admin required to run a script at a specific time, as an enrolment action and complete the task in the script (which for reference was WiFi / Network related) before moving onto the next enrolment action and continuing the the onboarding flow.\nWith the in product script actions this just simply isn\u0026rsquo;t possible.\nUpdate The Device Inventory Data Again its not like the device inventory data cannot be updated. Its updated in a number of ways and times\nIts updated when the device checks in (which is once every 4 hours, at time of writing) An admin can manually refresh the device through the console Users can initiate a refresh of their device through the Student or Teacher app An API endpoint is available to refresh the device and update the inventory data However, it cannot be done programatically like with Jamf Pro and the binary.\nUltimately both problems stem from not being able to call actions programatically or at will within the Setup Manager enrolment actions.\nColouring Outside The Lines Knowing that I wasn\u0026rsquo;t able to perform these actions, I sat down and started to think. I knew that I had to think differently and, as I like to call it \u0026ldquo;colour outside the lines\u0026rdquo;. Essentially use Setup Manager in a way that perhaps wasn\u0026rsquo;t intended but will still get the results.\nWith the first issue in mind, that of running a script programatically, I looked at the enrolment actions that I did have available in Setup Manager. Installomator or a Wait Tile wouldn\u0026rsquo;t be any use, neither really would a Watchpath. So then the only other option that was available was a Shell Command.\nA Shell Command is just a single command, yes it can have options and flags but its not a script, with variables and logic, running command after command. You cannot just add all the lines of a script (and in this case it was 50 or so lines in the script) to a single or even multiple Shell Command enrolment action.\nHowever, I can use a shell command to run a script that is already located on the device. As admins we do this all the time in terminal, something like\n/path/to/script/MyScript.sh\nThis of course requires the script to be on the device, which it wont be at enrolment\u0026hellip;.\n\u0026hellip;Hang on\u0026hellip;.\nThanks to the Automated Device Enrolment Packages \u0026amp; Profiles feature that was added to Jamf School, I can add packages to the device AT enrolment, meaning they are on the device by the time Setup Manager is running; and if we package the script and add it as an Automated Device Enrolment Package, I can use the Shell Command enrolment action to run the script when I need it, just like calling a policy with Jamf Pro.\nBingo! Now the admin I was working with can run the \u0026ldquo;WiFi checker\u0026rdquo; as the first enrolment action and thanks to the logic in the script, it holds the device at that action until the script is complete (ie, the device is on the correct network) before moving on to downloading and installing other software.\nAs I always say, when it comes to scripting your imagination is the limit. The admin in question needed to run a script in their environment that checked some WiFi \u0026amp; networking conditions as the first action but maybe you have a requirement to run a script half way through your onboarding flow, or after a certain software title has installed.\nMy point here is, it doesn\u0026rsquo;t matter what the script does, we now have a way run a script whenever we need, in a given order, at a specific time.\nFrom a configuration point of view, these are the steps to take to create a similar workflow\nStep 1: Creating A Package Containing a Script Lets assume that you have a script already in hand, we will need to package it up. The first consideration to make is where to locate the script in the first place. Realistically this could be anywhere you want. It could be the system tmp folder or the /Users/Shared, however, as you\u0026rsquo;ll see later, you might want to be a little bit more targeted and thoughtful in this placement.\nAs such, my suggestion is that we store the script in /Library/Application Support/JamfSetupManager\nTo create a package use a tool like Jamf Composer (which as a Jamf School Customer you should have access to through Jamf Account) or you can run script to tackle the packaging.\nI\u0026rsquo;ve added an example and simple script on GitHub for packaging the scripts but I must say that if you want to learn more you should check out Armin Briegels (scriptingosx )Packaging For Apple Administrators book. It could do with a bit of an update but the fundamentals are still there and I learnt so much reading this book. Regardless of how you package your script, once you have it, you can move on to step 2\nStep 2: Upload Package to Jamf School Log into Jamf School and navigate to\nApps -\u0026gt; Inventory and click + Add App Choose Add In-House macOS Package Navigate to your \u0026lt;MYSCRIPT\u0026gt;.pkg on your machine and drag to the Jamf School window Once uploaded click save Step 3: Add Enrolment Action To Your Setup Manager Configuration Profile Again Im going to assume that you have a Setup Manager configuration already. If not you can simply add the enrolment action as you build out your Setup Manager configuration profile.\nSince you cannot edit an existing \u0026lsquo;custom profile\u0026rsquo; in the Jamf School console you will need to edit your original profile or download from Jamf School. In both cases you\u0026rsquo;ll also need a tool for editing, this could be something text based like BBEdit or Coderunner or something most specific to creating preferences such as PlistEdit Pro .\nYou will know in your workflow where you need to run this script but for my example I want to run as script as the first action. Therefore in my configuration profile I will add the following key/values.\n\u0026lt;key\u0026gt;icon\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;symbol:wifi\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;label\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Checking Wifi Network\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;shell\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/Library/Application Support/JamfSetupManager/WiFiSwitcher.sh\u0026lt;/string\u0026gt; Its important that you list the location of your script in the shell string if you did not follow my suggested location Once you\u0026rsquo;ve added the enrolment action to invoke your script, save the configuration profile.\nStep 4: Upload The Updated Configuration Profile to Jamf School Again, assuming that you already have a Jamf Setup Manager configuration profile in Jamf School and you are updating your configuration (if not, and this is your first upload of a Setup Manager configuration, use the Jamf Setup Manager Quick Start Guide ).\nNavigate to your Setup Manager Configuration in the Profiles -\u0026gt; Overview menu Click in the name of the profile (or the pencil icon) Click replace profile Drag or choose your updated profile and click upload Once uploaded click save Replacing a custom profile like this does not require you to A) Edit the payload UUID B) Rescope the profile in any places it was already scoped\nStep 5: Edit Automated Device Enrolment Profile Once again, assuming you already have a Setup Manager workflow in place you will need to add your newly uploaded \u0026lt;MYSCRIPT\u0026gt;.pkg to the ADE profile ((if not,, and this is your first upload of a Setup Manager configuration, use the Jamf Setup Manager Quick Start Guide ).\nNavigate to your ADE profile used for your Jamf Setup Manager workflow in the Profiles -\u0026gt; Automated Devices Enrolment Profiles menu Click Profiles and packages Under In-house macOS packages click + Add In the drop down menu search / find your \u0026lt;MYSCRIPT\u0026gt;.pkg Click save You will not need to add / or replace the Setup Manager configuration Profile if you updated it as mentioned in the step above. However if you created a new Profile (for testing purposes for example) be sure you select the new Profile here as well as paying attention to the info banner in console regarding scoping. With that all in place you are ready to test your flow and call a script whenever you required. Since Jamf Setup Manager is what calls the script, unless handled and redirected in the script, any output the script produces (such as an echo) will be found in the Setup Manager log.\nAdd Setup Manager pkg \u0026amp; Configuration Profile and packaged script to ADE profile in Jamf School Setup Manager and the script pkg is installed during enrolment Setup Manager enrolment action uses shell and and points to the script location and runs the script Setup Manager continues with all other enrolment actions and closes Device is ready for user to log in and start to use the device Forget Colouring, Lets Take A Big Thick Marker To The Page So far thats one of the items ticked off, programatically running a script. It still left the need to update the devices inventory or refresh device as we know it in Jamf School.\nSo here is the warning before we go any further, the big thick marker scribbling over the page as it were. What Im about to say next will polarise people. It\u0026rsquo;ll be down to you if the benefits outweigh the concerns. Don\u0026rsquo;t say you weren\u0026rsquo;t warned\u0026hellip; Remember these are the ways we can perform a refresh device\nIts updated when the device checks in (which is once every 4 hours, at time of writing) An admin can manually refresh the device through the console Users can initiate a refresh of their device through the Student or Teacher app An API endpoint is available to refresh the device and update the inventory data The first three clearly aren\u0026rsquo;t designed to be automated at all but the whole idea of an API endpoint is just that, automation and triggering that action from an external source.\nHow would you automate and hit an API endpoint? A script would be most peoples first call\u0026hellip;.and haven\u0026rsquo;t we just figured out that we can run a script at a given time with Setup Manager? Why, yes we have.\nSo we can write a script that interacts with the Jamf School API, which we can then run using an enrolment action as the last step of the flow. Now we also have a way of performing a refresh device at a given time too. Problem solved!\nIf you\u0026rsquo;re new to the Jamf School API heres an example of a simple script to perform a refresh device and its also able over on my Github #Find UDID of device udid=$(system_profiler SPHardwareDataType | awk \u0026#39;/Hardware UUID/ {print $3}\u0026#39;) #API details for SchoolOverview schoolInstance=\u0026#34;\u0026lt;INSTANCENAME\u0026gt;\u0026#34; ##Edit Here apiNetwork=12335 #Edit Here apiKey=qwerty0987 #Edit Here base64Key=$(echo -n \u0026#34;$apiNetwork:$apiKey\u0026#34; | base64 ) #Optional addtional param available, directly after refresh clearErrors=\u0026#34;?clearErrors=true\u0026#34; #Make the call curl -X POST https://\u0026#34;$schoolInstance\u0026#34;.jamfcloud.com/api/devices/\u0026#34;$udid\u0026#34;/refresh \\ -H \u0026#34;Authorization: Basic $base64Key\u0026#34; \\ Okay, this is where I can imagine some people screaming at their screens reading that Im suggesting we run API calls from our end users devices! Mainly due to the script most likely (and most certainly in my case) having API credentials in plain text in the script.\nYes, I hear you but\u0026hellip;.theres a few things I\u0026rsquo;ll point out\nFirstly, we\u0026rsquo;re talking students and teachers onboarding devices. Our students are kids, how many of them are really trying to mine data from their school devices?! (I\u0026rsquo;m sure there are some, lets be real) We\u0026rsquo;re talking education environments, not a highly regulated industry like FinTech.\nSecondly, these scripts are ran during setup assistant. By an app thats designed to take over the whole screen and stop a user from interacting with anything other than the Setup Manager screen. Thats a lot of work for your average \u0026ldquo;not bothered\u0026rdquo; student to have to figure out how to get around, should they even realise theres some scripts nestled away on the file system performing API calls.\nThirdly, as you\u0026rsquo;ll see in the next section. Im not suggesting that we don\u0026rsquo;t mitigate some risk as part of this process.\nUltimately though, its your choice. In many cases I believe that the ability to perform these extra actions (particularly those that we\u0026rsquo;ll cover in part 2) during setup out weigh the risk or problem of an end user device performing API calls. However I also completely understand in other cases Admins simply wouldn\u0026rsquo;t be able to consider this due to policy set in their environments.\nTime To Shred The Page, Clean up and Reduce Risk As I suggested above there is still actually one last step that we should perform in order to be \u0026ldquo;good Admins\u0026rdquo;. Its all very well and good me suggesting the scripts are ran during Setup Manager, where a user can\u0026rsquo;t simply get at the file system but keeping the scripts on the device after Setup Manager and once the user has easy access to the file system, thats craziness!\nCentral Script Folder So that I don\u0026rsquo;t make assumptions, before we talk about clean up. Lets just go over the configuration you\u0026rsquo;d need to go through in order to run multiple scripts during Setup Manager. To sick with my example I want to run my Wifi Switcher script as my first enrolment action and then update the device inventory data by running a refresh device script as the last enrolment action.\nWhat we wouldn\u0026rsquo;t do is create a package per script (imagine if you had 5 or 6 scripts you wanted to run! You\u0026rsquo;d also quick run out of slots in the ADE profile in Jamf School, which is limited to 5 packages). Instead there was a reason that I suggested that you created a central location to store the scripts.\n/Library/Application Support/JamfSetupManager\nYou can simply add all the required scripts into this folder and then call the required script at the right time in your Setup Manager enrolment action. Take a look at my example Setup Manager Configure Profile on GitHub .\nOnce you\u0026rsquo;ve added all the required scripts to that location you\u0026rsquo;d need to create a new package / configuration profile and follow the same steps as above.\nClean Up Now we have just a single folder that contains these scripts that potentially include sensitive data that is actually in a location that a user can browse to and potentially read data from. (remembering in this case Im talking API credentials for the refresh device call but in reality any script you run could have data you wouldn\u0026rsquo;t want your users stumbling across).\nHowever the fact that we do have that single location also makes the clean up super easy! We just need to delete that folder once Setup Manager has finished.\nThe good news is, since version 1.3 Setup Manager has included a feature that will run one last script once the Setup Manager process has finished.\nfinishedScript\n(String, optional)\nA full path to a script file which will be executed after Setup Manager has finished its workflow. This process runs independently of Setup Manager, so it can run installers or scripts that affect Setup Manager.\nThe script has to fulfill these criteria to be executed:\nowner: root, group: wheel executable bit set not writable for group or other (file mode 755 or 555) no quarantine flag attached The output of the finished script and trigger will be logged to /private/var/log/setupManagerFinished.log.\nExample:\n\u0026lt;key\u0026gt;finishedScript\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;/Library/Management/finishedScript.sh\u0026lt;/string\u0026gt;\nPrevious to this Armin had written a stand alone tool to perform this action and so can still be achieved if for some reason you have not or cannot move to version 1.3+\nTo use this action add the above finishedScript key to the top level configuration (see example Setup Manager Configuration Profile ) and point it towards your last script. I would suggest that you call it finishedScript.sh and of course it should be located in our /Library/Application Support/JamfSetupManager folder.\nThe contents of the script is just a simple deletion of the /Library/Application Support/JamfSetupManager folder\nrm -rf /Library/Application\\ Support/JamfSetupManager Since this script requires certain criteria in order to be executed in the example package builder script that is on GitHub I set the permissions prior to running the package command. This could however also be done as a postinstall action Now, once Setup Manager has run all the enrolment actions, that can now include scripts and API calls, has finished this last script will run to remove the folder with any scripts we used. (includes sensitive data in them such as API credentials.)\nAdd Setup Manager pkg \u0026amp; Configuration Profile and packaged script to ADE profile in Jamf School Setup Manager and the script pkg is installed during enrolment Setup Manager enrolment action uses shell and points to the script location and runs the first script Setup Manager continues with the enrolment actions Setup Manager uses another shell action, again pointing to the script location but is targeting a second script, with an API call to refresh the device Once Setup Manager has finished an additional and final script is trigger which deletes the central script location so that they are no longer on the device The user lands on the login window and device is ready to use To Wrap Up Part 1 Again I must stress, running API calls from an end users device might not be for everyone. You must make your own mind up if this is something you can or should run in your environment.\nWe do however reduce the risks of end users being able to access the scripts that contain API credentials and by the time a user could snoop around to look for them, they are long gone.\nAlso consider the benefits these additional flows can bring and add this to any justification or decisions you make.\nIn part 2, we\u0026rsquo;ll look further into this API concept and what other advantages it brings, which includes the IT Driven, Single Touch workflow that will allow IT Admins to provision devices for their users whilst still harnessing the benefit and power of Jamf Setup Manager.\n","date":"July 26, 2025","permalink":"/posts/advanced-setup-manager-flows-in-jamf-school/","summary":"Jamf Setup Manager powered up macOS deployment workflows for Jamf School but what happens when you power up the power up? In this blog we look at some advanced Setup Manager workflows aimed specifically at Jamf School","title":"Advanced Setup Manager Flows in Jamf School, Part 1","type":"blog"},{"content":"Like many of us, this week has been spent watching as many WWDC videos I can fit in as well as looking through all the new documentation.\nOne of the most antisipated sessions for us Apple Admins, or at least me, is the What\u0026rsquo;s New In Apple Device Management and Identity session. There was lots to be excited about but one thing that particularly got my attention was access to a new AxM API.\nI watched the video on the Tuesday morning (since Im in the UK, Im not one to stay up all night watching these things) and before I even got to my desk messages were pinging around with links to newly released AxM API Documentation Despite it not really being on my list of things to do that day, I went to have a look at it. With a quick scan I could see there was a section about how to authenicate to gain access to the API . In a nutshell it looked like, copy and paste some things from AxM, create a token, use that token to create another token and then use that to made the API calls.\nTheres an example python script there but as I said, it wasn\u0026rsquo;t really on my list of things to do on that day. I thought to myself: \u0026ldquo;I\u0026rsquo;ll come back to it when I have some more time. Might be nice to figure out how to do all this with Bash though\u0026rdquo;\nLife went on.\nWednesday rolled around and another message landed with a link for Using the new API for Apple Business/School Manager by Bart Reardon. Bart had already turned the docs into plain english and with a step by step guide but even better, produced a ZSH script. On a side note, once I\u0026rsquo;d look at it I realised I was never going to figure out how to produce a bash script from the example phyton script\u0026hellip;.not without our good old friend ChatGTP.\nSo, this blog is NOT to give you a step by step guide on how this all works since Bart already did a great job with his blog.\nSo, if you haven\u0026rsquo;t already, go read that and then come back and pick up here. Instead I want to talk about what I\u0026rsquo;ve done since seeing his ZSH script. At this point I can\u0026rsquo;t decide if I\u0026rsquo;ve used smarts to automated the hell out of it\u0026hellip;.or over engineered a solution to a problem that isn\u0026rsquo;t going to exist! In any case, I had fun with the little project so Im here to share.\nLooking At Barts Script As I mentioned, in a nutshell you have to generate a few tokens before you can even make an API call in the first place. Of course, this make things more secure but it also makes things more complicated.\nThe first token you have to create is an Client Assertion, you then use this to generate a Access Token and with the Access Token you can finally make an API call.\nThe Client Assertion is valid for 180 days (assuming it wasn\u0026rsquo;t revoked in AxM by an Admin in the mean time). So once you\u0026rsquo;ve created this once, you haven\u0026rsquo;t got to worry about it again for quite some time.\nThe Access Token only lasts for an hour, which again isn\u0026rsquo;t a bad thing from a security point of view. Once its expired you must create another one with a valid Client Assertion\nWhile looking at Barts script you can see all of these pieces. The thing was the result of getting the Client Assertion was written out to a text file, you needed to go an copy paste that into variable into another script that is actually making the API call in order to create the Access Token which was stored locally in that script.\nSo if I were running or testing multiple scripts I\u0026rsquo;d have to copy / paste that Access Token into many (since it seems wasteful to create a new one in each and every script if I had a valid one elsewhere). Then want happens when I can\u0026rsquo;t actually remember which script has a valid Access Token, remember they are only valid for an hour.\nEven with just testing, nevermind writing something now and not coming to to it for weeks or months. I feel like I\u0026rsquo;d be forever generating that Access Token. For me this is taking away from the thing I want to spend more time working on, the AxM API and any automations I might want or need.\nThe Client Assertion isn\u0026rsquo;t really the issue here since its got a much longer expiration.\nSmart Automation or Over Engineered? So I setout spliting out some of these componets to that all I ever needed to do in my AxM API scripts is add to lines of code at the top and it would take care of the Access Token management.\nIf the Access Token didn\u0026rsquo;t even exist, they\u0026rsquo;ll check the Client Assertion is still valid and go ahead and create a new Access Token\nIf the Access Token exist, they\u0026rsquo;ll check that its still valid (ie, 60 mins old) but if not, they\u0026rsquo;ll go ahead and create a a new Access Token providing there is a valid (in date) Client Assertion\nThis way, wether its becuase I\u0026rsquo;m testing or if its becuase in production I only run this script every few months, I know my API calls will work. Further to this since its only 2 lines of code at the start of my script, its not bloated with logic and checks, again letting me just focus on the task at hand.\nAs I say, its to been seen if this is even a problem we\u0026rsquo;ll have. If it is, what I did to make the above a reality sways over to the Over Engineered side.\nThe Solution I Built You can find the project over on my GitHub but lets take a few moment to see what I came up with\nBuilt a Script that only deals with creating the Client Assertion Saves the Client Assertion to a text file, along with a date/time stamp 180 days later Built a second Script that only handle the creation of the Access Token Saves the Access Token to a text file, along with a timestamp 60 mins later Should an Access Token not exist, the second script will create an Access Token providing the Client Assertion is still valid based on its date/time stamp Should there be an Access Token but its not valid based on its timestamp, the second script will create a new valid Access Token, again providing the Client Assertion is still valid based on its date/time Enables two lines of code in the actual API script that creates/checks/renews the Access Token and saves the value into a variable for use in that script This is all contained in a folder structure so as long as you add the scripts that interact with the API in the root of this folder, you only need to add the values you need from Axm to the Create Client Assertion and Create Access Token scripts once and no other variables are needed to make the automation work.\nConfiguring the Automation First things first, if you haven\u0026rsquo;t already go and read Barts blog so that you know how to configure ASM. From ASM you\u0026rsquo;ll need\nThe Private Key File which will end in .pem Client ID Key ID Step 1 Download the AxM_API folder from the GitHub repo . It doesn\u0026rsquo;t matter where this folder lives on the device as long as you know where you keep it as this is going to become the working folder for all of your ASM API scripts\nStep 2 Take your Private Key File and move it into the AxM-API/AxMCert folder\nStep 3 Open AxM-API/AutomationScript/create_client_assertion.sh in a text/code editor Enter the name of your Private Key File (so for example myPrivateKey.pem, not the location of the file) into the private_key_file variable Enter your Client ID into the client_id variable Enter your Key ID into the key_id variable Save and close Step 4 Open AxM-API/AutomationScript/create_access_token.sh in a text/code editor Enter your Client ID into the client_id variable Comment out either scope=\u0026quot;school.api\u0026quot; or scope=\u0026quot;business.api\u0026quot; depending on if you are interacting with ASM or ABM Save and close Step 5 Run AxM-API/AutomationScript/create_client_assertion.sh Using the Code Any script that you want to use that interacts with the AxM API needs save to the root of the AxM_API folder.\nI\u0026rsquo;ve given a simple example script within the AxM_API folder.\nYour scripts just need the following two lines at the top\n./AutomationScripts/create_access_token.sh accessToken=$(awk -F\u0026#39;: \u0026#39; \u0026#39;/^AccessToken:/ {print $2}\u0026#39; ./Tokens/access_token_format.txt) Then you will use the accessToken variable as the bearer token in a call. Below is a simple example.\ncurl \u0026#34;https://api-school.apple.com/v1/mdmServers\u0026#34; -H \u0026#34;Authorization: Bearer ${accessToken}\u0026#34; Notice that as part of the setup with didn\u0026rsquo;t run the create_access_token.sh? Thats becuase on the first run of any script, the automation will see that there isn\u0026rsquo;t one and will generate it on the fly for you.\nThe next part is up to you! How you interact with AxM and the automations and workflow you create is actually the hard part and the part that gets the job done.\nIf you haven\u0026rsquo;t already seen, here are the [Apple Documents for the ASM Endpoints or ABM Endpoints A Quick Note Although the scripts take care of keeping the Access Token valid, I didn\u0026rsquo;t actually build in any \u0026ldquo;self renewal\u0026rdquo; of the Client Assertion. If this becomes invalid due to being over 180 days old, everything will just exit and error out.\nSo if you need to renew this, run AxM-API/AutomationScript/create_client_assertion.sh again.\n\u0026ldquo;You took the time to self renew the Access Token so why not the Client Assertion\u0026rdquo;. Great Question! I just didn\u0026rsquo;t, at least not today. Maybe next time I have a few minutes and I don\u0026rsquo;t have a project Im not working on\n","date":"June 13, 2025","permalink":"/posts/automating-token-generation-for-apple-school-managers-new-api/","summary":"I was looking at the new documentation when an article from Bart Reardon landed on my desk. He\u0026rsquo;d done the work already, so I went and automated the hell out of it","title":"Automating Token Generation for Apple School Managers New API","type":"blog"},{"content":"Creating a frictionless onboarding experience can be the key to a successful deployment, especially if your end users are driving the onboarding. As an Admin we are well aware of the amount of times a user might be asked to \u0026ldquo;log in\u0026rdquo; or enter their credentials. That might be before the user even actually logs in to the user space, where they\u0026rsquo;ll likely get asked to login to various apps as well. Now, I know that SSOe can help with some of this once in the user space but for this blog, SSOe is out of scope.\nWhat I want to focus on in this blog is situations where an admin is using Authenitcated Enrollment , Jamf Connect and a supported idP, which for this particular workflow must be Entra.\nSetting The Scene Incase Authenticated Enrolments or Jamf Connect are new to you, lets quickly cover them off\nAuthenicated Enrollment When enrolling a device using Automated Device Enrollment an Admin can choose for the user to authenticate. If the user enrolling the device doesn\u0026rsquo;t have a user account with the chosen provider or isn\u0026rsquo;t able to provide the correct credentials then the enrolment cannot be completed. This stops unauthorised users being able to enrol school owned devices or said another way, if the devices goes \u0026ldquo;missing\u0026rdquo;, gets wiped and ends up on the second hand market, unless you have a valid user account in the schools directory the device is a brick.\nTheres a second advantage to using an authenticated enrolment, which if i\u0026rsquo;m honest is likely the main reason for using this feature, is that upon successful authentication, the device is then assigned to the authenticated user in Jamf School. Depending on the setup in Jamf School, this can then trigger the rest of the onboarding experience that is unique to that user. For example getting a different configuration if they are a teacher than a student or if the student is in Year 7 or Year 10.\nTo try and keep on topic, I\u0026rsquo;m not going to cover the steps to configure the Authenication module in Jamf School or how to build an ADE Profile with Authenticated Enrolment configured as it is well documented. Jamf School can point to Entra, Google, LDAP or its internal directory for this feature. Customising Enrollments Microsoft Entra ID Integration Google Sign-In Setup Jamf Connect In the context of an onboarding, Jamf Connect creates a local macOS account based on idP details and continues to keep the password in sync. Essentially meaning that the local user account name and password match that of the one at the provider (there are many idP\u0026rsquo;s Connect works with) and if the password is changed at the provider the change is synced to the local account too.\nAgain, to keep on topic, I wont be covering how to configure Jamf Connect with a given idP (although I\u0026rsquo;ll be using Entra in my example and will link to that below) or how to configure a basic deployment with Jamf School. However, if you need this guidance I\u0026rsquo;ve listed some useful documentation below. Integrating Jamf Connect with Microsoft Entra ID Jamf Connect Deployment with Jamf School So What Is The Actual Issue Here? Now the we know what the two components we\u0026rsquo;ll be working with do, lets talk about the user experience while onboarding their device.\nAssuming for a second that I am the user, a teacher, first day on the job. I get given a new MacBook, along with a new username and password. Im told I\u0026rsquo;ll be able to set it up myself either on site or at home. I turn it on, choose my language, location and connect to wifi. The next screen I see it the enrolment screen and I select enrol.\nSince the admin has decided on an authenticated enrolment, the next screen I get presented with is a Microsoft looking login screen where I\u0026rsquo;m asked for my credentials.\nI was given them at the same time as my MacBook so I log in. All is good and the enrolment continues, I may or may not set up things like location services, Apple ID, touchID etc etc.\nOnce thats all over I land at the login window, which is Jamf Connect and presented with another Microsoft looking login screen\u0026hellip;.the exact same one as I\u0026rsquo;ve already logged into. Or at least to me, as a user it looks like the same one\nThis is the 2nd time I\u0026rsquo;ve had to log in within a few minutes and as a user Im confused why I\u0026rsquo;ve had to log in to what looks like the same thing again. Im also annoyed that I\u0026rsquo;ve had to enter my whole username and password, again.\nFor some, this might not sound like too much but remember there are lots of users in Education that are either not super confident with IT or, in the case of students, not yet IT proficient enough to enter a username and password correct multiple times.\nAs an Admin, we know that although the user thinks they\u0026rsquo;ve logged into the same thing, since they\u0026rsquo;ve seen the same Microsoft login window, what they\u0026rsquo;ve actually done is prove they are a valid user to further the enrolment and then created a local user account on the device. The reason they got 2 log in windows that looked the same (in that they were that Microsoft looking window) was because both the Authentication module in Jamf School and the Jamf Connect configuration are pointing to the same idP, in our case Entra.\nCreating A Better Experience Since both components are pointing to the same idP wouldn\u0026rsquo;t it be better if after the user has authenticated at enrolment that these details are are passed onto Jamf Connect so that they didn\u0026rsquo;t need to go through the whole experience again?\nI think yes!\nIf you\u0026rsquo;ve ever used Jamf Pro, you\u0026rsquo;ll know that this very thing is achievable in product via a tick box at a pre-stage enrolment. Just because that same option isn\u0026rsquo;t available in an ADE profile in Jamf School, it doesn\u0026rsquo;t mean we cannot achieve this same result.\nThe key to this workflow is actually variables in a configuration profile. If Jamf School variables are not something you are familiar with, then take a look at this previous blog that explains how these work.\nIn a nutshell we are going to create a workflow that does the following\nAuthenticates the user at enrolment Assigns the user to that device Delivers all required profiles and packages for Jamf Connect Delivers an additional profile to the com.jamf.connect.login domain, where certain user variables have been substituted for the assigned users real details Jamf Connect appears and already has the account name and username filled (based on the Authenticated Enrolment) User only needs to enter the password at the Jamf Connect window, which sets the local account password Bill Of Materials Before looking at the additional configuration profile for the rest of the blog we\u0026rsquo;ll assume that you have the following configuration items in place\nAzure / Entra ID Enterprise App configured correctly for Jamf Connect Jamf School Configuration Authentication Module configured to work with Entra ID Enterprise App Jamf School Items Jamf Connect pkg uploaded Jamf Connect login and menu bar configuration profiles uploaded, configured as required (Optional) Jamf Connect branding pkg ADE profile ADE profile assigned to target devices ADE Profile Options with Authenication selected with assign authenticated user selected Connect login and menu bar configuration profiles assigned Connect pkg assigned (Optional) Jamf Connect branding pkg assigned If you haven\u0026rsquo;t got any of this in place, use the documentation listed above to configure these items before moving on to the next section.\nAdditional Jamf Connect Profile As mentioned above the key here is an additional piece of Jamf Connect login configuration. If this is in place at the Jamf Connect login window, rather than presenting the user with idP login experience the account name and username is pre-filled with the assigned users details. Asking the user to only enter their password, which must be the same as their idP before they can proceed (this means the local account username and password is in sync with the idP from the very off set)\nIn order to pre-fill the correct details Jamf Connect Login expects the keys EnrollmentRealName and EnrollmentUserName in its preference domain com.jamf.connect.login.\nEnrollmentRealName is the Full Name of the local account. Usually this is the name that is more friendly, for example Ant Darlow\nEnrollmentUserName is the Account Name of the local account, the one that is used for the user home folder. Usually this would be something more like ant.darlow since everything must be lower case and with no spaces. In the case of Jamf Connect, this must be the full email address (UPN) as you would type if you were entering it in the Microsoft login window, e.g. ant.darlow@example.com. The local Account name / home folder then becomes the part before the @. So although you must provide the full UPN of ant.darlow@example.com the home folder and account name becomes the more manageable ant.darlow\nIn a nutshell, what we are saying here is we need to offer up the Full Name and the Email of the user to Jamf Connect through this configuration. Of course we\u0026rsquo;re not going to create a profile for each and every user with their data hardcoded, we\u0026rsquo;ll use Jamf School variables . We can simply use %FullName% and %Email% variables in the profile which will be sustituded for the assigned users real values, which would look something like this\n\u0026lt;key\u0026gt;EnrollmentRealName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;%FullName%\u0026lt;/string\u0026gt; \u0026lt;key\u0026gt;EnrollmentUserName\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;%Email%\u0026lt;/string\u0026gt; I\u0026rsquo;ve wrapped these up into the required profile that you can find over on my GitHub . Since it relies completely on variables you can use this in your environment as is. The only thing that you might want to change is the following with your company details.\n\u0026lt;key\u0026gt;PayloadOrganization\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;Your Company\u0026lt;/string\u0026gt; To edit the details you could use something generic like BBEdit or Coderunner or something more specific to creating preferences such as PlistEdit Pro .\nIf you\u0026rsquo;re not sure how to upload a custom payload I cover it in this blog under the heading \u0026ldquo;Deploy Custom Profile with Jamf School\u0026rdquo; Assigning The Additional Jamf Connect Profile The last part of the puzzle is to assign this profile to your target devices (assuming you have everything in the BOM in place). This could be done in 2 ways depending on your deployment\nOption 1: Scope to Device Group Along with Other Configuration If you are anything like me you\u0026rsquo;ll have a main macOS Configuration and Apps group where you assign your core configurations and apps for macOS regardless of who owns the device. If not I\u0026rsquo;m sure you\u0026rsquo;ll have something similar.\nYou can add the additional Jamf Connect Profile to this group or any group that targets the macOS devices that you want to run this flow on\u0026hellip;.which will be the same ones as your Authenicated Enrolment ADE Profile is scoped to.\nThis feels like the safe option since we know the profile will 100% land on the device after the user assignment from the authenticated enrolment has been reported back to Jamf School and therefore the variables substituted correctly.\nNow the \u0026ldquo;problem\u0026rdquo; with this method is that depending on what setup assistance steps you skip you might end up on the Jamf Connect screen before the additional profile has landed on the device. This will result in the normal \u0026ldquo;please enter your Entra details\u0026rdquo; page for a few moments, until the profile does land. In those few moments, a user with fast fingers might have already entered their details and the purpose of this flow completely missed.\nIf your onboarding flow includes multiple screens and asks users to sign in with Apple ID or configure TouchID as examples, or use an onboarding tool like Setup Manager , you will be fine.\nHowever, if you skip everything you can during setup assistant, option 2 will be the better choice.\nOption 2: Add the Additional Connect Profile as an ADE Profile Deploying the additional Connect Configuration Profile as part of the ADE profile, along with all other Connect configuration ensures that the profile lands on the device right away. This means that even if you skip all setup assistant panes the profile will be on the device.\nMy concern with this was that the profile lands on the device before the user assignment is updated for the device record in Jamf School. Therefore the %FullName% and %Email% variables aren\u0026rsquo;t substituted and are instead seen as literal strings. This would mean that Jamf Connect would set the Real Name as %FullName% etc. In turn the details wouldn\u0026rsquo;t match with any Entra user and the user would never be able to log in, causing support tickets for the IT dept.\nHowever, based on my testing and since the authentication happens before the enrolment profile is available the user assignment is reported back to Jamf School in the first few transactions between the device and the database. This also reflects in the console, a device that uses authenticated enrolment and assigns the user to the device shows the correct user as soon as it shows up in the device inventory. This happens before any ADE packages or profile commands are issued to the device, meaning the variables will get substituted correctly.\nRemember, as per the Jamf School Documentation , any profile assigned via an ADE profile must also be scoped to the device in the regular way to maintain installation on the device Thats really it, a simple two key profile that can change the user experience for the better!\nA Note On Users in Jamf School One of the biggest and most popular topics I talk about and consult on in my day job is that of users (or identities as I like to refer to them as). In my opinion getting this right is the key to a great Jamf School deployment but getting users into Jamf School isn\u0026rsquo;t trivial.\nI could easily write 7 or 8 blog posts on users, how many ways we can pull them into School and why / how each way brings an advantage. So Im not going to get into any of that right now but if you want to dive into this in more detail, I suggest the second half of my JNUC 2024 talk In relation to user assignments and authenticated enrolments for this flow, the thing you need to be aware of is, depending on if you import the user before enrolment or if the user is imported once authenticated; you\u0026rsquo;ll get different values in the username field of the user record in Jamf School.\nThis might not be important for everyone, but if you are importing / syncing your users into Jamf School from various sources and appending data to user records, having the correct username prevents the creation of additional users (instead of matching user records).\nImporting / Sync users from a source, for example ASM will use the the prefix of the UPN (the part before the @) as the username. When using CSV or API the admin can define the username to match this prefix (ant.darlow for example) and when syncing with LDAP we can map the correct value to ensure we get a desired username (which again will most likely be something like ant.darlow). This makes matching users and appending data to the user record easy.\nIf the user isn\u0026rsquo;t already sync\u0026rsquo;d or imported into Jamf School before a user performs an authenticated enrolment is it imported on a successful authentication. The username value is populated with the UPN, remembering that this is the full \u0026ldquo;email\u0026rdquo; address, ant.darlow@example.com. There is no way for us to remap this\u0026hellip;this is the way. If / when a sync with another source happens, say ASM it will import a new user with the username ant.darlow, this could then causes issues with class assignments or other smart groups.\nIf none of this is ringing any bells for your deployment, don\u0026rsquo;t worry about it but it very much is one of those if you know you know type of situations. And if you do know, make sure you\u0026rsquo;ve got the right data in place before moving ahead with any authenticated enrolments, if you\u0026rsquo;re not already using them Quick Thanks I\u0026rsquo;ve been doing some work recently with Jamf Setup Manager in Jamf School (Im excited to blog about this work, lets hope I get chance to write this up soon) and as part of this work I paid more attention then ever before to the Pre-set user for Connect section and applied that to Jamf School.\nI believe that it was @mvdbent that wrote up that particular part of the documentation so a tip of the hat in his direction!\n","date":"June 10, 2025","permalink":"/posts/macos-authenticated-enrollment-passthrough-in-jamf-school/","summary":"Creating a user experience with the least amount of friction is key to a great onboarding and theres nothing more grinding than entering credentials over and over. Find out how to passthrough user details from an Authenticated Enrolment to Jamf Connect.","title":"macOS Authenticated Enrolment Passthrough in Jamf School","type":"blog"},{"content":"Let\u0026rsquo;s get one thing out of the way, I know the term I should be using is \u0026ldquo;Apps \u0026amp; Books in Apple School Manager\u0026rdquo; and not VPP; but lets face it, almost everyone knows what is meant by VPP and for this post, and the amount of times I\u0026rsquo;ll reference it, its a heap quicker to type! So to avoid any confusion if I use VPP, Im talking about apps acquired through Apple School Manager (ASM) 😜\nAlso I will dig into the Automatically Update Apps when Available option and some useful nuggets about expected behaviours but since we\u0026rsquo;re talking Apps and updates I\u0026rsquo;m going to take a little de-tour before I get to the automatic option, so stick with me or just jump straight to the section Automatic App Updates\nVPP Apps VPP Apps are a nice, simple and an easy way that Apple has provided IT Admins to deploy apps to devices from the App Store. In fact, on iOS / iPadOS devices its the only way! (..well mostly but lets not get into 3rd party app stores and side loading.). To make use of this, as an Admin you simply need register your institution for an ASM environment. I use the word simply, since although the process is straight forward, getting the right person(s) in your institution to click the links or speak to somebody at Apple isn\u0026rsquo;t always as simply as it sounds. Hopefully, you are the person that can agree to the T\u0026amp;Cs and sign your institution up, if you haven\u0026rsquo;t already, its a lot less hassle that way.\nFor instructions on signing up to Apple School Manager see the Sign Up For Apple School Manager Documentation . Its worth noting that ASM and Apps \u0026amp; Books content isn\u0026rsquo;t available in every region. When it comes to acquiring content and syncing with Jamf School, this is again a pretty simple and well known process. An Admin logs into Apple School Manager and navigates to Apps \u0026amp; Books, searches for the App (or Book) needed and selects the amount of licences needed their deployment. I use the word \u0026ldquo;acquire\u0026rdquo; here as I think its strange to say \u0026ldquo;buy\u0026rdquo; apps when they are free. After a few moments these licences are assigned to your token and avaialble in your MDM. In Jamf School, as long as configured already (See Volume Purchase Integration page in the Jamf School docs) you can sync your token and the App is ready to go, scope as required and the Apps start to appear on the devices.\nSince I mentioned it, there are a few ways that you can sync your VPP token with ASM in Jamf School.\nThe first to just do nothing! There is an automatic sync with ASM at regular intervals which means the new apps, books or additional licences will turn up all on there own\u0026hellip;..eventually.\nThe likelihood is, if you have acquired a new app or licences you are going to want to deploy them right away and not wait for that automatic sync. Its just going to break your rhythm and thats not going to be useful for that teacher that has just knocked on your door, asking for the app\u0026hellip;for their next lesson\u0026hellip;in 20 mins (hopefully they\u0026rsquo;ve also brought biscuits or coffee to help smooth over the urgency ☕️🍪)\nYou can therefore, manually sync Jamf School with ASM to pull through the latest information. This can be done by either\nNavigating to Dashboard and hitting the Syncronize Now button Navigating to Apps -\u0026gt; Inventory and clicking the Sync with Apple School Manager button Okay so thats nothing to do with updating apps but we at least have a nice overview of how simple this process is (even if you\u0026rsquo;ve never seen it in Jamf School before)\nUpdating Apps We\u0026rsquo;ve got a nice simple way of deploying apps with VPP but what about keeping them up to date? After all, deploying Apps is only part of their lifecycle.\nThere are a few ways an Admin can keep their VPP Apps up to date when using Jamf School depending on your requirements. This could be offloading this responsibility directly to the user, keeping it squarely as an admin task where you choose when, who and what gets updated or just set and forget with an automatic option.\nLike often when there\u0026rsquo;s more than one way to do things, theres no such thing as a right or wrong way, its all dependant on one Admins situation and environment. Also sometimes, when available, using more than one way might be the best option.\nFor example if you are in an environment where everyone needs the latest version of an app all the time, automatic updates are the best but why not also enable the user to update as well. Theres double the chances things are kept up to date.\nThe opposite side of the fence is if you are in an environment where you need to test the functionality against various OS versions and implement BETA testing groups. You\u0026rsquo;d want to keep this squarely as an Admin task and push App updates only when you are ready.\nUser Updates The way to enable users to update apps is via the Jamf Student or Teacher apps (they both offer this functionality). This doesn\u0026rsquo;t require you to be using the apps for classroom management (although, of course are highly recommended tools for teachers in the classroom).\nTo configure this feature In the Jamf School console navigate to\nOrganisation -\u0026gt; Settings -\u0026gt; Student Check the box Allow Updates of Automatically Installed Apps Click Save Now in the Jamf Student / Teacher app a user has a a menu item called App updates. If they navigate to that menu they will see any VPP apps deployed automatically by Jamf School that require updating and can start the updating of any or all available updates. In addition, any apps that are installed via the Jamf Student / Teacher App are always shown in this menu.\nThis option is available for macOS, iOS and iPadOS.\nPros Free\u0026rsquo;s up Admin time as keeping Apps up to date becomes the users responsibility Users can update Apps when it is convenient for them and without disruption mid task Ideal for 1:1 devices, particular ones that go home Cons Takes some user education to ensure they are aware they can self serve App updates Users may not actually ever update apps, which in the long run might cause issues Enabling users to update apps at any time might mean they do it on your network, which might cause you bandwidth issue (think if many users did this all at the same time, and yes even with a Caching Server it could cause some network slowness) Enabling users to update apps at any time likely means that a user, most likely a student, could and will update a key app in the middle of a lesson to prevent them from having to do any work Not recommended for devices that are shared between multiple users since its no one persons responsibility to keep apps up to date Planned Updates by Admins Keeping Apps up to date this way requires the person responsible for keeping apps up to date to have access to the Jamf School console and the time to deliver this service. By no means does this mean that its a bad option but it can be a much more time intensive than other option.\nTo use this option, in the console navigate to Apps -\u0026gt; Updates. From this window you will see a list of apps that require updating. Within each app that requires a update you can either click the Update all device button (which updates the app on all devices that have it installed) or a Show devices button. If you select Show devices you get a list of all the devices with that app installed and have an update available and can update the app on single iPads (rather than the entire list). There are also some mass actions that can be performed at the main Updates page by checking the box to select all or many apps. This way you can choose to update all apps, across your entire fleet with a single click.\nI\u0026rsquo;ve seen this options used in two different ways depending on the reasoning behind going with this route in the first place.\nThe first is for Admins that want to update everything, all at once but at a time they choose, for example over a school holiday or over the weekend. Using the bulk option allows for a single click to start the flow but it does require a click of a button, so the Admin chooses when to start that particular flow.\nAgain, just to point out, even with a Caching Server, pushing all updates to all devices at once (when they are on your school network at least) could produce a heavy load. Consideration to the impact of this should be given. The second is for Admins that have update test plans. Being able to not only choose when to update apps but who receives the update can be very useful if you have a BETA users group that provides feedback on usability before releasing the update to the general population (I\u0026rsquo;m sure every Admin has seen an app update that didn\u0026rsquo;t quite work the way the dev intended and had an app out of action while a fix is delivered)\nPros Granular control of when updates are applied Updates only issued during times deemed as appropriate by admins Run test plans with BETA test user style groups Cons Requires Admin intervention on a regular basis Can be very time intesive Could produce a heavy load on the network Apps could be without new features if not updated regularly, which might have an impact on the teaching in the classroom Automatic App Updates So then we land at automatic app updates. This is a feature enables an Admin to set and forget when it comes app updates (well, kind of but we\u0026rsquo;ll get to that shortly). This setting can be enabled by navigating to Organisation -\u0026gt; Settings -\u0026gt; General. From this window check the box Automatically update apps when an update is available (note that this says only for iOS devices on iOS 11.3 or later but this does work for macOS as well.)\nIts that simple, automatic updates are enabled and when a new app is available it will get updated on the device\u0026hellip;which sounds great. Until you think about it a little more, particularly the part that says when an update is available. When is an update available? Well thats the point, how long is a piece of string. This could be any time but including (and thanks to Murphys Law , most likely) in the middle of class. What happens to an app when its updating? Well the next time it is closed, or if already closed, then it becomes unavailable until the update is complete. Depending on the size of the app, the load on the network at any given time and if the app is cached on a Caching Server, then you could have entire classes suddenly not able to complete their tasks. Or put another way a queue of angry teachers at your door.\nThats why on the same General window under the Automatically update apps when an update is available option there is a second option that works to make automatic updates smarter. This option is Only automatically update apps during the specified times. Once the box is check there are two boxes where the Admin can define a start time and finish time. This allows an Admin to basically say\n\u0026ldquo;Please automatically update the VPP apps when available, but only between the hours of 22:00 and 04:00\u0026rdquo;.\nThis way apps wont be unavailable due to updates during school time or during times of day that you might expect a child to be doing homework (if the devices go home). The time window that you give here will be completely dependant on your situation, for example if the devices do not go home and you know that they aren\u0026rsquo;t used from 17:00 then you could start the update window from say 18:00 right the way through until the next morning before people start to arrive at school. One thing that I would personally recommend though, is to make that update window as wide as possible and at least 5 hours, due to the mechanisms used to provide the update (again, we\u0026rsquo;ll get to this shortly). This might also be useful if you have some sort of network shaping that happens at certain times of time of the day (I\u0026rsquo;ve seen school completely turn off wifi or heavily restrict bandwidth during the evening), to ensure that the updates take place as smoothly as possible.\nForce for Locations, Global Settings and App Details Once an Admin has configured these settings and if they also use Locations , they can enforce this on all locations if set from the main location. At the top right corner of the window you see a drop down (only if using locations) where you can toggle between Force these settings for all locations and Do not force these settings for all locations. If you force for all locations the automatic update setting(s) and any and all settings that are in the General window are set for every other location and cannot be configured differently at each location. This might just be what you want so that all all locations act in the same way but in other cases each location may need a different window for example.\nAnother little message you will see alongside the Automatically update apps when an update is available is This setting can be overwritten in App Details. This option allows for a more granular approach if a \u0026ldquo;set for everything and forget\u0026rdquo; doesn\u0026rsquo;t quite work. An admin could set the Global setting (aka set under Organisation -\u0026gt; Settings -\u0026gt; General) so that apps automatically update but exclude certain apps from this, so that new versions can be tested before pushing out to the entire fleet.\nTo do this navigate to Apps -\u0026gt; Inventory, search for / choose the app to exclude and click on its name or the pencil tool. In this App Detail window, on the right there are some options that can be configured for this individual app, including a setting Automatically update apps when an update is available. As standard this is set to Use global settings in every app record but there are also two other options Enable and Disable.\nIf an admin wanted to exclude this app from being automatically updated they would choose Disable from this menu and ensure they hit Save before leaving the page. Lets assume we\u0026rsquo;ve selected Automatically update apps when an update is available in Organisation -\u0026gt; Settings -\u0026gt; General; The result is that as standard Apps will get updated automatically apart from this app, which the Admin would need to manually update or allow the user to self serve the update.\nThis situation can also be flipped. Lets say an Admin doesn\u0026rsquo;t want to automatically update apps as a general rule however, there are a handful of apps that must always be up to date. The Admin would leave the Automatically update apps when an update is available in Organisation -\u0026gt; Settings -\u0026gt; General unchecked. They could then go to that \u0026ldquo;school critical\u0026rdquo; app record and choose Enable in the App Details Automatically update apps when an update is available option. Then only this app would automatically update, leaving for other flows for the rest of the apps.\nSounds Great, Set and Forget, Sign Me Up\u0026hellip; For most people, automatically having VPP apps update and not needing to think about it again (or until we need to troubleshoot something at least) is going to be the option that is chosen the most. It just makes sense for most Admins.\nSo you\u0026rsquo;ve chosen this option and things are ticking along, you\u0026rsquo;ve not thought about app updates for a little while. Then suddenly you get a ticket in your system or a knock on the door from a teacher. App X had an update a 4 or 5 days days ago, its a major one with an exciting new feature that is going to really help that teacher when it comes to engaging students. Only, they\u0026rsquo;ve looked at App X on their device for the last few days, it doesn\u0026rsquo;t look any different and the app still says its the old version number when it loads.\nYou look at them, thinking \u0026ldquo;users\u0026rdquo; knowing full well that you\u0026rsquo;ve got automatic updates turned on. Only they show you, and the app does indeed say the old version. Next you think maybe I\u0026rsquo;ll just have a look at the console, theres a section for App updates. So you log into the console and navigate to Apps -\u0026gt; Updates. As the page loads, theres a heap of apps listed there that need updating on a heap of devices, including App X. You want to help the teacher that needs to updated app so you hit Update all devices on App X, smile at the teacher, say it\u0026rsquo;ll be updated in a little while and apologise while secretly sweating it wondering why your apps aren\u0026rsquo;t automatically updating.\nIf you are already use this feature, this might have actually happened to you already. So wants gone on? why aren\u0026rsquo;t your apps update? To answer that we need to understand the mechanics and expected behaviours that come with automatic updates.\nAutomatic Update Mechanics \u0026amp; Expected Behaviours So there are a few things that we need to understand with the Automatically update apps when an update is available feature in Jamf School.\nThe first is around an \u0026ldquo;App Update\u0026rdquo;\nThere isn\u0026rsquo;t an Update App command as such (its the same with reinstall) in the MDM framework. Instead a regular InstallApplicationCommand, which is the same command sent when an app is first installed, is used. This prompts the device to go and pull the app from the app store, which is the latest version and as such a user see\u0026rsquo;s an updated app on the device. Commands like this can be pushed to the device there and then (like the first install of an app would be) or queued up for when a device nexts checks-in.\nThis in of itself isn\u0026rsquo;t the part that is the \u0026ldquo;light bulb moment\u0026rdquo; but knowing that an update is kicked on server side (at least until Apple expand DDM a little more) is going to help all the pieces fall into place in a second.\nThe question we should be asking is how does Jamf School know when to send the device a InstallApplicationCommand or more so when and how does Jamf School know that there is a new version of App X in order to send an InstallApplicationCommand to the device?\nThis is two fold.\nFirstly when a device does a full check in with Jamf School (this happens once a day, through clicking refresh device on the device inventory and a few other times) there are a number of commands Jamf School sends to the device to query it for information. One if these is InstalledApplicationList this returns a heap of data about the apps installed on the device, including a key HasUpdateAvailable, which is true or false and the ExternalVersionIdentifier. Basically the ID of the App in the App Store.\nIf you really want to to dig into this a little more I\u0026rsquo;ll guide you to the Apple Developer Docs for InstalledApplicationListResponse.InstalledApplicationListItem and note this specific call out\nA newer version of an app might not be available for installation on the device for a variety of reasons. A common reason is that the device’s operating system version or hardware is incompatible with the available version of the app.\nThe second part of the puzzle is Jamf School\u0026rsquo;s App record(s) getting updated from Apple School Manager (actually its the App Store but I\u0026rsquo;m splitting hairs), specifically it\u0026rsquo;s version number changing. If the version number in the App record in the Jamf School database hasn\u0026rsquo;t changed, and the device hasn\u0026rsquo;t reported its InstalledApplicationList data, Jamf School wont queue up that all important InstallApplicationCommand (this is a simplified version of events, Im sure there is some other logic here but the point is we need both sides of the coin, as it were, before Jamf School is able to queue the update)\n\u0026hellip;we know from above when the device reports the HasUpdateAvailable, so the follow on question should be\n\u0026ldquo;So when does Jamf School sync with ASM to pull the latest metadata about the apps its pulling through into the App Inventory?\u0026rdquo;\nThis is the key question! Understanding this is the key to understanding the behaviour of the Automatically update apps when an update is available feature and either not panicking the next time somebody says apps haven\u0026rsquo;t updated or amending your workflow a little.\nAs it stands and understandably so, Jamf School doesn\u0026rsquo;t knock on ASM\u0026rsquo;s door every few minutes to ask if theres any changes. Instead Jamf School syncs with ASM only in a few scenarios, in fact we\u0026rsquo;ve mentioned a few of these already above. When it comes to apps, as an Admin you can you can initiate a School ASM sync by\nNavigating to Dashboard and clicking the Synchroize Now button (this will sync data about all apps) Navigate to Apps -\u0026gt; Inventory and clicking the Sync with Apple School Manager button (this will sync data about all apps) ,br\u0026gt; Navigate to Apps -\u0026gt; Inventory, click on either the pencil tool or the app name to enter the App Details and then click Check for updates in the App Store (this will sync data about this app) Navigate to Apps -\u0026gt; Updates (this will sync data about all apps and you will see a message in the lower right once the sync is complete) Its not until a sync happens that Jamf School can compare the App version number in the Jamf School database with that of the version number in ASM, do the other logic with the data the device reports back and if needed (ie the app version is different and the device reports an avilable update) send that all important InstallApplicationCommand.\n\u0026ldquo;What happens if I am truly a set and forget Admin? I rarely do one of the things you\u0026rsquo;ve just said above! Does that mean my apps don\u0026rsquo;t ever actually get updated?\u0026rdquo;\nI\u0026rsquo;ll guess there\u0026rsquo;ll will be more than a few people asking this question right now. I certainly asked this question at least.\nLuckily the answer is, even if are a true set and forget Admin, your apps are still getting updated. Just maybe not as quickly after release as your users would like. Jamf School will automatically initiate an ASM sync to fresh app metadata once every 7 days. After this automatic sync, if there are any differing version numbers, which suggest an app needs updating, Jamf School will queue and deliver the InstallApplicationCommand to the corresponding devices (as long as they\u0026rsquo;ve successfully reported back the InstalledApplicationList) for these apps.\nSo the apps will get updated even if you set and forget but at any given time, if you were to check the Apps -\u0026gt; Updates window you will see apps that need to be updated and haven\u0026rsquo;t. This is because the automatic sync hasn\u0026rsquo;t happened yet (its not been 7 days since the last sync). The very fact that clicked on that page initiated a sync and that data has literally just been pulled through, now that there is a known update in the Jamf School database, the devices will get the updates at their next check in (again, as long as they\u0026rsquo;ve successfully reported back the InstalledApplicationList). Assuming you didn\u0026rsquo;t click the button to have them update now.\nDealing with the Expected Behaviour The key and light bulb moment here is know what is meant by the when an update is available part of automatic updates. when an update is available does not mean as soon as a developer pushes an update to the app store. Instead, what is meant by \u0026ldquo;available\u0026rdquo; is once Jamf School is aware it is available, which depending on your habits as an Admin could be as far out as 7 days from the release to the App Store\nAs an Admin there are a few ways to deal with this. Firstly and it feels a little defeatist, don\u0026rsquo;t use the Automatically update apps when an update is available feature and instead opt for one of the other update options mentioned above.\nSecond is to evaluate if having an update up to 7 days after release is acceptable for your environment. This could be from a feature or security point on view. Assuming that it is acceptable, my suggestion would be to educate your users that updates can take up to a week after release to update and create some way of your user to escalate important cases so they can have apps updated sooner. From an Admin point of view, this would require a person to go into the console, go to the Apps -\u0026gt; Update page and choose to update that app on the devices.\nThirdly is to do one of the four things mentioned above each day, or every few days at least. I know that there will be people that think that not very \u0026ldquo;automatic\u0026rdquo; but my argument would be I\u0026rsquo;d bet you are in the Jamf School Console (or somebody on your team) at least once a day, so why not have them click the sync button? Remembering that once the app version number has updated then Jamf School takes care of the rest of it anyway\u0026hellip;.queuing up and deploying the InstallApplicationCommand.\nOh I almost forgot! while we\u0026rsquo;re talking about queuing up and deploying the InstallApplicationCommand. Remember the option Only automatically update apps during the specified times so that updates only take place at certain times of day? The InstallApplicationCommand is queued and not delivered until a device checks in during that window of time. Thats why I said keep the window as wide as possible (and at least 5 hours) as a check in happens once every four hours with Jamf School and if your update window is only 2 hours, you might have heaps of devices that never get the execute the command as then don\u0026rsquo;t check in during that window, even weeks after an update has been released.\nPros Set and forget app updates Set an update window of time so updates don\u0026rsquo;t happen during key times Can be set at a global level or per app Can exclude apps from global setting depending on need Cons Depending on console usage, App sync with ASM can be up to 7 days away when an app is released Requires device to have successfully reported back details of a InstalledApplicationList command Scheduled updates require a device to check in during the schedule window, making the window too short or having device with not network connections could see devices rarely get app updates Perception that auto updates is not working when navigating to Apps -\u0026gt; Updates page Need for communication to end users and other admins on expected behaviour VPP App Update Options As you can see there are a number of ways to tackle this and things to consider if you are wanting to use the Automatically update apps when an update is available option. For me, the purpose of this blog was to give a bit more understanding of the mechanics of the Automatically update apps when an update is available option since its done server side and not via a simple MDM framework command.\nTheres been thought and time put into this to make sure that updates only go to devices that have updates available (no point trying to send an update to a device that isn\u0026rsquo;t running an OS that is compatible with the latest version of an app) and at a time that is best suited.\nIm sure however, there are people out there wondering what option I would take. The answer there really depends on the deployment but I\u0026rsquo;d be using a combination of auto updates (more as a fail safe) and another option. For 1:1 devices, especially ones that go home I\u0026rsquo;d look to use auto updates during home hours but also educate the users in how to use the update feature of Jamf Student / Teacher. For shared devices or devices that stay in the school the whole time a combination of auto update (again more as a fail safe) and then pushing updates via the Apps -\u0026gt; Updates pages a few times a week or maybe over the weekend.\nThere is one other thing I\u0026rsquo;d like to point out. I\u0026rsquo;ve spoken to people recently where is seems that using the Automatically update apps when an update is available feature in environments where Caching Server is also used causes a sort of loop in some cases. The commands are queued and executed as expected but the app that is installed always seems to be current version the device has, not the newest one.\nI don\u0026rsquo;t have anything else to add to that, in terms of fixes or anything and it doesn\u0026rsquo;t appear to be in every instance. Its more of a PSA. The thing I will say on the topic of Caching Server though\u0026hellip;\nIts super simple to configure, that simple in fact that its now part of macOS. Just a toggle switch to turn on and with more and more households having many Apple devices it makes sense its that simple to turn on and make use of this feature.\nOnly most school networks aren\u0026rsquo;t as simple as a home network and once upon a time you only got the Caching ability as part of macOS Server, which you had to configure correctly! Although in todays built-in version of Caching Server its just a toggle switch and designed to \u0026ldquo;just work\u0026rdquo; on simple home networks, there are advanced options in the GUI. Theres even more that can be configured via terminal and DNS servers for when the deployment is on an \u0026ldquo;enterprise\u0026rdquo; style network that most schools find themselves on.\nOnly in many cases caching servers are deployed on \u0026ldquo;enterprise\u0026rdquo; style networks by just toggling the switch on and expecting things to \u0026ldquo;just work\u0026rdquo;.\nCaching Server can be great, don\u0026rsquo;t get me wrong and I 100% recommend them. Sometimes its just worth being aware of other things you might want to consider when turning something on (wether thats Caching or Automatic App Updates).\n","date":"May 22, 2025","permalink":"/posts/automatically-updating-vpp-apps/","summary":"Keeping your VPP (Apps \u0026amp; Books) Apps up to date can be as simple as a check box in Jamf School but lets look at what to expect when using the Automatically Update Apps when Available Option","title":"Automatically Updating VPP Apps","type":"blog"},{"content":"If you are a Jamf School Admin theres a good chance that you\u0026rsquo;ve used variables in your deployment.\nVariables are super useful to an Admin as they provide a way to create configurations that requires unique values without having to create many (10\u0026rsquo;s, 100\u0026rsquo;s, 1000\u0026rsquo;s depending on your deployment) individual items for each unique values. The format for variables in Jamf School is %Variable% and there are many different variables that can be substituted. You can find a full list in the documentation Variables can be used in a number of places within the Jamf School console, not just in Profile payloads.\nJamf School Variables Popular use cases for variables are for naming devices (using %ProductName% - %SerialNumber% will change the devices display name with a prefix of the device type with the individual devices serial number after) and creating custom iOS wallpapers which display the owners name. For example creating a wallpaper payload where the image is a schools colours and logo and then adding text on top of this. Using %FullNames%'s iPad would then display the full name of the user assigned to the device. You can actually use variable\u0026rsquo;s to generate an QR code on the wallpaper which, once scanned, will take you directly to that device record in the console.\nDepending on the variable that you are using they are also dynamic. Lets take the name of the device again, only this time we use %FullName%'s %ProductName% and the device\u0026rsquo;s owner is Alice. The devices name would be Alice's MacBook Pro. If we were then to give that device to Bob and assign him as the owner, upon next check in the devices name would change to Bob's MacBook Pro. All without the admin needing to rename the device manually.\nVariables are very powerful when used correctly and can be key when in workflows or automations. Its all about working smarter not harder.\nmacOS Scripting As mentioned above variables can be used in various places in the console, not just in the Profile payloads section. They work across all supported platforms, iOS, iPadOS, macOS \u0026amp; tvOS, and if you are supporting macOS you might have tried to use these Jamf School variables in your scripts only to find this is about the one place they are not supported!\nThere are many reasons that one might what to use the Jamf School variables in a script, as I always say when it comes to scripting you are limited only by your imagination but Im sure you could think up some times where it would be useful to have information stored in Jamf School variables available in a script. Even if its simply who is the current owner, which of course doesn\u0026rsquo;t always equal the name of the user account currently signed in or if you use Locations in Jamf School, which location is the device assigned to.\nHowever adding %Username% to a script wont result in Jamf School substituting that value with in your script. It\u0026rsquo;ll stay is %Username% and give you a result that you didn\u0026rsquo;t intend.\nSo, if Jamf School variables can be so useful, how can we use them within our scripts? The answer is, make them available locally on the device.\nUsing Jamf School Variable Substitution At the risk of teaching people to suck eggs, lets quickly look at what happens when we use variable substitution in the Jamf School Console. After all, for every admin out there that has been doing this for years, theres another who only just started managing devices.\nEssentially, when you use a %variable% you are saying I want to use a value that is yet to be determined, the %variable% is just a placeholder. Depending on which variable you use, Jamf School will then add the \u0026ldquo;real\u0026rdquo; value when creating the configuration.\nLets take an example of a profile that asks an admin to provide the users email address as part of the configuration. At this point the Admin has no idea who the user will be, it could be 100\u0026rsquo;s of possibilities. So instead they use the value of %Email%.\nSince Jamf School also knows about users in the system and their relationship with devices, when it delivers the profile to the device it says\n\u0026ldquo;Okay I need to replace %Email% with the real value. I can see that this devices owner is Ant Darlow, I will look up that users record stored in my system and find his email value, which is ant@email.com . Now I will write this real value into the profile\u0026rdquo;\nThe same is the case with any of the available variables in the console, think %SerialNumber% or %uuid%, these are values that Jamf School already store about the device and can be substituted in place of the %variable% placeholder.\nWithout the variable an admin would need to create a unique profile for each and every user and hardcode the real value into each one. Variables allow for this \u0026ldquo;configure once, use for all\u0026rdquo; type of workflow.\nIts worth noting that if a \u0026ldquo;real\u0026rdquo; value is not available Jamf School configurations will still show the %variable% placeholder. For example, if you name the device with %FullName% and the device does not have an owner, the device will be called FullName, until the point is does have an owner assigned How to use Jamf School Variables in Scripts Thats all very well and good but you might be thinking, \u0026ldquo;how does that help me use these Jamf School variables in scripts\u0026rdquo;. The answer it two fold and using the fact that Jamf School will substitute these variables for real values when creating configurations\u0026hellip;.configurations such as Profiles.\nOnce we have a profile, that contains these \u0026ldquo;real\u0026rdquo; values, on the device, its basically a preference file. With a script we can read information from preference files or in our case our custom profile!.\nI\u0026rsquo;ll walk you through the steps as we go along but as an overview\nCreate a custom profile containing variables you might need or want to us in a script Deploy custom profile with Jamf School Create a script (or edit one you have) that reads the values in the custom profile Win at admin-ing and drink coffee To follow along you\u0026rsquo;ll need a way of creating a Profile. This could be something generic like BBEdit or Coderunner or something most specific to creating preferences such as PlistEdit Pro .\nThere are also an example profile over on my GitHub .\nStep 1: Creating a Custom Profile The First step is finding out the Jamf School variables available to you and choosing which ones you are going to need or want within your scripts, a full list can be found in the documentation Once you have choosen the values you will need to add them to the profile as a key / value pair.\n\u0026lt;key\u0026gt;AssetTag\u0026lt;/key\u0026gt; \u0026lt;string\u0026gt;%AssetTag%\u0026lt;/string\u0026gt; The key tag is the name for the value and its important that we keep these names sensible and to the point as its these keys we will be reading in our script but they can by anything. You will thank yourself in the future if you keep them simple and concise , I promise.\nAs for the value you will see that I have added the Jamf School variable (in the above example %AssetTag%. Remember the placeholder will be substituted for the \u0026ldquo;real\u0026rdquo; value once deployed by Jamf School, it doesn\u0026rsquo;t matter that you aren\u0026rsquo;t creating the profile in Jamf School. However, if you were to upload this to another MDM the chances are almost certainly zero that any substitution will happen. Maybe that MDM doesn\u0026rsquo;t use variables at all or uses a different syntax (for example Jamf Pro uses $variable$, opting for $ instead of %)\nIf this is the first time you\u0026rsquo;ve ever created a profile manually to upload to Jamf School (or any other MDM for that matter) I highly suggest you take my example profile and edit that as required, rather from starting from scratch.\nThere are a few values that you might want to change from the example\nPayloadType This is the preference domain that the profile will create and you will read the data from in your scripts. Again this can be anything you like but is usually a reverse domain. If you require to use you own preference domain be sure to change this but for the following examples I will assume the example default is bring used.\nPayloadOrganization At both the top level and within the PayloadContent. You may want to change this you match your organisational name\nPayloadDisplayName At both the top level and within the PayloadContent. The name displayed for the profile / payload in the system settings of macOS\nPayloadDescription The description displayed for the profile in the system settings of macOS\nFinally, if you have are comfortable with creating and editing a plist, you could instead create a plist and save it with the preferred preference domain (following the example it would be com.cantscript.localUserInfo) and upload it to Jamf School as shown in the next step. Jamf School will wrap the plist into a profile once uploaded / deployed.\nStep 2: Deploy Custom Profile with Jamf School With you custom profile prepared and saved, the next step is to upload it and deploy it with Jamf School. This is a fairly easy process but if you\u0026rsquo;ve never need to do this before, navigate to\nProfiles -\u0026gt; Configuration Profiles and click + Create Profile Choose Upload custom profile Navigate to the Custom Profile on your machine and drag to the Jamf School window Once uploaded click next Add a Profile Name (and a Description, as required) and click Next Click Finish on the next page Click Save You custom profile is now ready to be deployed. This can be done in a few ways with Jamf School, use your regular scoping methods to deploy to your target device(s) when ready (you should only deploy to your test device for now).\nIf you have used any of the user variables in your profile, you should consider scoping the profile only once the device has an owner assigned using smart groups. Otherwise the values will not be substituted and even if a owner is assigned after the fact the profile will need reinstalled On a test device you can verify that the profile has installed and that the %variables% have been replaced with the \u0026ldquo;real\u0026rdquo; values that are stored in Jamf School\nStep 3: Read Profile Values in a Script There are 2 ways that I know to read profile values within a bash script and I suspect there are more. The first is to use plistbuddy. A function can be written which enables you to read a specific key from the plist, offer a default value (if the key isn\u0026rsquo;t there) and store it an a variable. Thijs Xhaflaire uses this method in his DiskEncrypter project. An example of this function is\nmanagedPlist=\u0026#34;/Library/Managed Preferences/com.cantscript.localUserInfo.plist\u0026#34; readPref() { # $1: key # $2: default (optional) local key=$1 local defaultValue=$2 if ! value=$( /usr/libexec/PlistBuddy -c \u0026#34;Print :$key\u0026#34; \u0026#34;$managedPlist\u0026#34; 2\u0026gt;/dev/null ); then value=\u0026#34;$defaultValue\u0026#34; fi echo \u0026#34;$value\u0026#34; } And the usage to store the result to a variable within the script would be as below; where AssetTag would be the key we are looking for and \u0026quot;no data\u0026quot; would be the default value if there was no AssetTag key\nschoolAssetTag1=$( readPref assestTag \u0026#34;no data\u0026#34;) The second way I was shown by Armin Briegel aka scriptingosx . This method is more robust as it reads key values for the preference domain, no matter where the plist(s) are located and these locations are numerous. Its a little outside of the scope of this blog but there could be a plist com.example.plist in /Library/Preferences, ~/Library/Preferences and /Library/Managed Preferences. There is then a hierarchy in which preference level takes precedence, however Configuration Profiles (/Library/Managed Preferences) overrule everything else.\nThis method will read key values across the all possible preference locations and take the hierarchy into account when providing the result (this is different to method 1 which is read a specific plist in a specific location)\nAlthough this method is slightly different, for our use case here the results are largely the same with both. The method of reading the preference and key is once again wrapped into a function\nMANAGED_PREFERENCE_DOMAIN=\u0026#34;com.cantscript.localUserInfo\u0026#34; getPref() { # $1: key, $2: default value, $3: domain local key=${1:?\u0026#34;key required\u0026#34;} local defaultValue=${2-:\u0026#34;\u0026#34;} local domain=${3:-\u0026#34;$MANAGED_PREFERENCE_DOMAIN\u0026#34;} value=$(osascript -l JavaScript \\ -e \u0026#34;$.NSUserDefaults.alloc.initWithSuiteName(\u0026#39;$domain\u0026#39;).objectForKey(\u0026#39;$key\u0026#39;).js\u0026#34;) if [[ -n $value ]]; then echo $value else echo $defaultValue fi } Given the above, there is also a function that can check if the key is set and locked with a profile. Again, outside of our use case here but this can be used to ensure that the key value you are reading is from a profile and not elsewhere. I\u0026rsquo;ve used this in other projects to there is no profile installed and exit the workflow\ngetPrefIsManaged() { # $1: key, $2: domain local key=${1:?\u0026#34;key required\u0026#34;} local domain=${2:-\u0026#34;$MANAGED_PREFERENCE_DOMAIN\u0026#34;} osascript -l JavaScript -e \u0026#34;$.NSUserDefaults.alloc.initWithSuiteName(\u0026#39;$domain\u0026#39;).objectIsForcedForKey(\u0026#39;$key\u0026#39;)\u0026#34; } The usage to store the result to a variable within the script would be as below; where AssetTag would be the key we are looking for and \u0026quot;no data\u0026quot; would be the default value if there was no AssetTag key\nschoolAssetTag2=$(getPref assestTag \u0026#34;no data\u0026#34;) Now this is where I leave the hard work to you. How, what or why you need or want to use these variables is completely dependant on you and your environment (and even imagination). I\u0026rsquo;ve given an example script which simply uses SwiftDialog to display the information, thus showing I am \u0026ldquo;accessing\u0026rdquo; those Jamf School variables in a script (the script can be ran from Jamf School using the scripting module) even if in reality this example is nothing more than \u0026ldquo;show and tell\u0026rdquo;.\nOne Last Thing Since we now know how to read key / values from a profile. If you are also using Jamf Student or Teacher Jamf School sends an additional profile to macOS device automatically. This profile contains some information to configure the app so that you don\u0026rsquo;t have to manually log in, for example.\nIf you take a look in the system settings you can see the key / values it provides. Some of these are the same as you may have in your custom profile (which means you might not even need to create a custom profile, depending on your needs!) but has the additional keys of isTeacher (which can be true or false) and photo (with a value that is a URL to the stored picture in your Jamf School instance).\nSo if you use photos to attached you users in your deployment you now has access to personalise notifications (like my swiftDialog example) with the owners photo too.\nThe managed preference domain for this is com.zuludesk.macos.selfservice.plist and managed preference in general (incase you what to read some other profile some time) are located in /Library/Managed Preferences\nI have also included an altered script over at GitHub that contains this additional logic to use the photo and add a teacher or student app icon depending on if result of the isTeacher key.\nFurther Reading If this is your first time diving into profile and plist creation but its sparked an interest, here are a few things you might want to check out\nConfig Profile and manage ALL the things…just about by Bob Gendler swift-prefs by scriptingosx\n","date":"May 7, 2025","permalink":"/posts/using-jamf-school-variables-in-scripts/","summary":"Jamf School allows for variable substitution all over the place, just not in Scripts! Learn how to deliver Jamf School variables to devices for use in Scripts","title":"Using Jamf School Variables in Scripts","type":"blog"},{"content":"I\u0026rsquo;ve been toying with the idea of creating a blog for a little while. At some point last year I decided to get the domain cantscript.com with the thought of next step blog and then didn\u0026rsquo;t.\nI have since then however embraced the moniker of CantScript on GitHub and MacAdmins Slack.\nShall we start with that? Why go be CantScript?\nWell its a bit tongue in check but at the same time, if you were to aks me to my face I would tell you\n\u0026ldquo;I can\u0026rsquo;t script. I have all these ideas of what would be cool but mostly have no confidence that I could script anything to get the idea across the line\u0026rdquo;\nI still stand by that but as it turns out, its not all about scripting is it. In a day and age of MDM its all about profiles and payload too\u0026hellip;just to add to the complexities. Once again, if you\u0026rsquo;d ask me i\u0026rsquo;d reply with\n\u0026ldquo;well, I think it works this way but I\u0026rsquo;m not sure if doing it that way would work\u0026rdquo;\nEven so, I\u0026rsquo;m a trier and more often than not I find a way to get something of the ground and working. Even if by most peoples standing it held together with tape.\nAnd that there is what I\u0026rsquo;d like the very point of this blog to be. I want to share things that I\u0026rsquo;ve struggled with or might not know and make it easier for the next person. Might it be the best way? Nope, likely not in fact! but if it gets somebody else from A to B quicker than it did me and they can improve on it, then I\u0026rsquo;d say I\u0026rsquo;ve done what I set out to do.\nThere is then a second point that I\u0026rsquo;d like to bring up\u0026hellip;\nAs mentioned on the home page, this blog will be focused on Apple and Jamf and my background has been in the Education sphere. As such as have developed a specialism in Jamf School but if you are here already, you likely know this.\nSo expect that most posts here will be all about Jamf School, Jamf School workflows and cool things to when working with Jamf School.\nThere we have it, my fist post so that theres something here when I heopfuly actually publish this blog to the big ol\u0026rsquo;interwebs.\n🐜\n","date":"May 1, 2025","permalink":"/posts/so...i-decided-to-make-a-blog/","summary":"Hello World! My first post and a chance to discover what I\u0026rsquo;m hoping this blog is all about","title":"So...I decided to make a blog","type":"blog"}]